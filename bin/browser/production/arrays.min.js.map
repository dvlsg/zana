{"version":3,"sources":["arrays.js"],"names":["factory","z","_internalSubsetSum","remaining","target","selector","partial","successes","s","sum","push","i","length","newRemaining","n","j","newPartial","deepCopy","arrays","aggregate","argsIterator","source","getType","this","types","array","arguments","func","seed","assert","isNonEmptyArray","result","lambda","any","predicate","average","contains","comparer","item","check","isFunction","x","y","equals","count","_deepCopy","distinct","_equals","arr2","first","_flatten","input","output","current","isArray","flatten","innerJoin","leftArray","rightArray","on","isObject","k","smash","isEmpty","exists","isFull","last","max","selected","maxValue","Number","MIN_VALUE","isNumber","min","minValue","MAX_VALUE","mutate","mutator","forEach","val","key","orderBy","containsKey","where","obj","missingKey","quicksort","concat","string","xIndex","yIndex","c","internalQuickSort","left","right","pivot","Math","floor","p","swap","quicksort3","indexForLessThan","indexForGreaterThan","indexForIterator","cmp","remove","splice","removeAll","removalCount","select","shuffle","random","skip","index","subsetSum","functions","identity","selection","indexA","indexB","temp","take","takeWhile","zip","arr1","method","setup","initArrays","usePrototype","defineProperty","Array","prototype","enumerable","writable","value","root","window","global","define","amd","module","exports"],"mappings":"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","file":"arrays.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var arrays = z.arrays = {};\r\n\r\n        /**\r\n            Performs the provided method on each element of array,\r\n            using the previous result and the current item as\r\n            arguments for the method.\r\n            \r\n            Note that we could really just use Array.prototype.reduce -- same thing.\r\n            \r\n            @this {array}\r\n            @param {array} source The original array.\r\n            @param {function} func A function used to return the result of an operation on the current element and previous result.\r\n            @param {function} [seed] An optional seed to use as the the first argument with the first item in the array.\r\n            @returns The result of the aggregate function on the array.\r\n        */\r\n        arrays.aggregate = function(/* source, func, seed */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var func = arguments[argsIterator++];\r\n            var seed = arguments[argsIterator++];\r\n            z.assert.isNonEmptyArray(source);\r\n            var result;\r\n            func = z.lambda(func);\r\n            if (seed == null) {\r\n                result = source[0];\r\n            }\r\n            else {\r\n                result = func(seed, source[0]);\r\n            }\r\n            for (var i = 1; i < source.length; i++) {\r\n                result = func(result, source[i]);\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Searches the array for at least one item \r\n            which either exists, or matches a given predicate.\r\n            \r\n            @this {Array}\r\n            @param {array} source The original array.\r\n            @param {function} [predicate] A predicate used to find matches for the array. This function should return a truthy value.\r\n            @returns True if at least one item is found which exists or matches the given predicate, else false.\r\n        */\r\n        arrays.any = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (predicate == null) {\r\n                return source.length > 0;\r\n            }\r\n            predicate = z.lambda(predicate);\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (predicate(source[i])) {\r\n                    return true;\r\n                }    \r\n            }\r\n            return false;\r\n        };\r\n\r\n        /**\r\n            Collects the average of an array of numbers or a given numeric property for an array of objects.\r\n            \r\n            @this {Array}\r\n            @param {string} [selector] A property name.\r\n            @returns The average of either the array itself, or the given property.\r\n        */\r\n        arrays.average = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            return arrays.sum(source, selector) / source.length;\r\n        };\r\n\r\n        /**\r\n            Searches the array for items for a match for a given item.\r\n            \r\n            @this {Array}\r\n            @param {any} item The item for which to search. or the predicate to use for matching.\r\n            @param {function} [selector] The optional selector function used to select an item from the array for matching.\r\n            @returns True if the item is found, else false.\r\n        */\r\n        arrays.contains = function(/* source, item, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var item = arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var comparer;\r\n            var i;\r\n            if (z.check.isFunction(item)) \r\n                comparer = function(x) { return item(x); };\r\n            else\r\n                comparer = function(x, y) { return z.equals(x, y); };\r\n\r\n            if (selector == null) {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(source[i], item)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(selector(source[i]), item)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        /**\r\n            Searches the array for items for matches for a given item.\r\n            \r\n            @this {Array}\r\n            @param {any} item The item for which to search.\r\n            @param {function} [selector] The optional selector function used to select an item from the array for matching.\r\n            @returns The count of the matches found.\r\n        */\r\n        arrays.count = function(/* source, item, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var item = arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var count = 0;\r\n            var comparer;\r\n            var i;\r\n            if (z.check.isFunction(item)) \r\n                comparer = function(x) { return item(x); };\r\n            else\r\n                comparer = function(x, y) { return z.equals(x, y); };\r\n\r\n            if (selector == null) {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(source[i], item)) {\r\n                        count++;\r\n                    }\r\n                } \r\n            }\r\n            else {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(selector(source[i]), item)) {\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            return count;\r\n        };\r\n\r\n        /**\r\n            Builds a deep copy of the original array.\r\n            To be used for the Array.prototype extension.\r\n\r\n            @this {array} The array from which to build the deep copy.\r\n            @returns {any} A deep copy of the original array.\r\n            @throws {error} An error is thrown if the recursive object stack grows greater than 1000.\r\n        */\r\n        var _deepCopy = function() {\r\n            return z.deepCopy(this);\r\n        };\r\n\r\n        /**\r\n            Builds a compressed array from the original, containing only distinct items.\r\n            If a selector is given, then uniqueness will be determined by \r\n            comparing the selected properties from objects on the array.\r\n            \r\n            @this {array}\r\n            @param {string} [selector] A property name.\r\n            @returns {array} A deep copied, distinct set of items.\r\n        */\r\n        arrays.distinct = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var result = [];\r\n            var i;\r\n            if (selector == null) {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (!result.contains(source[i])) {\r\n                        result.push(source[i]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (!result.contains(selector(source[i]), selector)) {\r\n                        result.push(source[i]);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Compares the equality of the original and a provided array.\r\n            To be used for the Array.prototype extension.\r\n\r\n            @this {array} The first array to compare.\r\n            @param {array} arr2 The second array to compare.\r\n            @returns {boolean} True if both arrays contain equal items, false if not.\r\n            @throws {error} An error is thrown if the recursive function stack grows greater than 1000.\r\n        */\r\n        var _equals = function(arr2) {\r\n            return z.equals(this, arr2);\r\n        };\r\n\r\n        /**\r\n            Collects the first available value on the array\r\n            optionally based on a given predicate. \r\n            \r\n            @this {array} The array on which to search for a max value.\r\n            @param {function} [predicate] The optional predicate used to find the first match.\r\n            @returns {any} If no predicate is available, then the first item. If the predicate is available, the first item which matches.\r\n        */\r\n        arrays.first = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (predicate == null) {\r\n                if (source.length > 0) {\r\n                    return source[0];\r\n                }\r\n            }\r\n            else {\r\n                predicate = z.lambda(predicate);\r\n                for (var i = 0; i < source.length; i++) {\r\n                    if (predicate(source[i])) {\r\n                        return source[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        var _flatten = function(input, output) {\r\n            for (var i = 0; i < input.length; i++) {\r\n                var current = input[i];\r\n                if (!z.check.isArray(current))\r\n                    output.push(current);\r\n                else\r\n                    _flatten(current, output);\r\n            }\r\n            return output;\r\n        };\r\n\r\n        arrays.flatten = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            return _flatten(source, []);\r\n        };\r\n\r\n        /**\r\n            Sets up two arrays of objects to be joined together.\r\n            \r\n            @this {array.<object>} The initial left array used for the inner join\r\n            @param {array.<object>} [rightArray] The secondary right array used for the inner join.\r\n            @returns {function} Returns an object containing the on method to be called after original inner join setup.\r\n        */\r\n        arrays.innerJoin = function(/* leftArray, rightArray */) {\r\n            var argsIterator = 0;\r\n            var leftArray = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var rightArray = arguments[argsIterator++];\r\n            // z.check.isNonEmptyArray(rightArray);\r\n            return {\r\n                /**\r\n                    Joins two arrays of objects together based on a provided predicate.\r\n\r\n                    @param {function} predicate The predicate used to find matches between the left and right arrays.\r\n                    @returns {array.<object>} The inner joined collection of left and right arrays.\r\n                */\r\n                on: function(predicate) {\r\n                    var target = [];\r\n                    predicate = z.lambda(predicate);\r\n                    for (var i = 0; i < leftArray.length; i++) {\r\n                        z.check.isObject(leftArray[i]);\r\n                        for (var k = 0; k < rightArray.length; k++) {\r\n                            z.check.isObject(rightArray[k]);\r\n                            if (predicate(leftArray[i], rightArray[k])) {\r\n                                target.push(z.smash({}, leftArray[i], rightArray[k]));\r\n                            }\r\n                        }\r\n                    }\r\n                    return target;\r\n                }\r\n            };\r\n        };\r\n\r\n        /**\r\n            Checks to see if an array is empty.\r\n            \r\n            @param {array} source The array to check for emptiness.\r\n            @returns {boolean} True if the array contains no elements, or a combination of undefined or null elements, false if not.\r\n        */\r\n        arrays.isEmpty = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            if (source.length < 1) {\r\n                return true;\r\n            }\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (z.check.exists(source[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Checks to see if an array is full.\r\n            \r\n            @param {array} source The array to check for emptiness.\r\n            @returns {boolean} True if the array contains no elements, or a combination of undefined or null elements, false if not.\r\n        */\r\n        arrays.isFull = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            if (source.length < 1) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (!z.check.exists(source[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Collects the last available value on the array\r\n            optionally based on a given predicate. \r\n            \r\n            @this {array} The array on which to search for a max value.\r\n            @param {function} [predicate] The optional predicate used to find the last match.\r\n            @returns {any} If no predicate is available, then the last item. If the predicate is available, the last item which matches.\r\n        */\r\n        arrays.last = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (predicate == null) {\r\n                if (source.length > 0) {\r\n                    return source[source.length-1];\r\n                }\r\n            }\r\n            else {\r\n                predicate = z.lambda(predicate);\r\n                for (var i = source.length-1; 0 <= i; i--) {\r\n                    if (predicate(source[i])) {\r\n                        return source[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n            Collects the maximum value of an array of numbers \r\n            or a given numeric property for an array of objects.\r\n            \r\n            @this {array} The array on which to search for a max value.\r\n            @param {string} [selector] A property name.\r\n            @returns The maximum value of either the array itself, or the given property.\r\n        */\r\n        arrays.max = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var maxValue = Number.MIN_VALUE;\r\n            var selected;\r\n            var i;\r\n            if (selector != null) {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = selector(source[i]);\r\n                    if (z.check.isNumber(selected) && maxValue < selected) {\r\n                        maxValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = source[i];\r\n                    if (z.check.isNumber(selected) && maxValue < selected) {\r\n                        maxValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            return maxValue;\r\n        };\r\n\r\n        /**\r\n            Collects the minimum value of an array of numbers \r\n            or a given numeric property for an array of objects.\r\n            \r\n            @param {array} source The source array from which to collect min value.\r\n            @param {function} [selector] A selector function.\r\n            @returns The minimum value of either the array itself, or the given property.\r\n        */\r\n        arrays.min = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var minValue = Number.MAX_VALUE;\r\n            var selected;\r\n            var i;\r\n            if (selector != null) {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = selector(source[i]);\r\n                    if (z.check.isNumber(selected) && selected < minValue) {\r\n                        minValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = source[i];\r\n                    if (z.check.isNumber(selected) && selected < minValue) {\r\n                        minValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            return minValue;\r\n        };\r\n\r\n        /**\r\n            Mutates the provided array based on a given mutator function.\r\n            Each item of the array will be passed through the mutator function,\r\n            setting the return from the mutator back to the original array index.\r\n            \r\n            @param {array} source The source array from which to collect min value.\r\n            @param {function} mutator The mutator function.\r\n            @returns A reference to the original (now mutated) array.\r\n        */\r\n        arrays.mutate = function(/* source, mutator */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var mutator = arguments[argsIterator++];\r\n            mutator = z.lambda(mutator);\r\n            if (z.check.isFunction(mutator)) {\r\n                z.forEach(source, function(val, key) {\r\n                    source[key] = mutator(source[key]);\r\n                });\r\n            }\r\n            return source;\r\n        };\r\n\r\n        /**\r\n            Creates an deep copy of the original array of objects, ordered by the given key. \r\n            \r\n            @this {Object[]}\r\n            @param {function|string} selector The method or lambda string used to select a key by which to order.\r\n            @param {function} [predicate] A predicate used to determine whether one object is greater than, less than, or equal to another. If no predicate is defined, then the javascript > and < comparators are used.\r\n        */\r\n        arrays.orderBy = function(/* source, selector, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            selector = z.lambda(selector);\r\n            predicate = predicate || function(x, y) {\r\n                return ((selector(x) > selector(y)) ? 1 : (selector(x) < selector(y)) ? -1 : 0);\r\n            };\r\n            var containsKey = source.where(function(obj) { return selector(obj) != null; });\r\n            var missingKey = source.where(function(obj) { return selector(obj) == null; }); // don't bother sorting items with null or undefined keys\r\n            containsKey.quicksort(predicate); \r\n            return containsKey.concat(missingKey);\r\n        };\r\n\r\n        /**\r\n            Sorts the original, given array in place by using the quicksort algorithm.\r\n            \r\n            @this {Array}\r\n            @param {string|function} [predicate] A predicate used to determine whether one item is greater than, less than, or equal to another. If no predicate is defined, then the javascript > and < comparators are used.\r\n        */\r\n        arrays.quicksort = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (z.getType(predicate) === z.types.string) {\r\n                predicate = z.lambda(predicate);\r\n            }\r\n            else {\r\n                // dont accidentally take z.functions.identity - use this else statement\r\n                predicate = predicate || function(x, y) {\r\n                    return (x > y) ? 1 : ((x < y) ? -1 : 0);\r\n                };\r\n            }\r\n\r\n            var comparer = function(x, y, xIndex, yIndex) {\r\n                var c = predicate(x, y);\r\n                if (c === 0)\r\n                    return xIndex - yIndex;\r\n                return c;\r\n            };\r\n\r\n            // more efficient to declare the internal call outside and just pass params around?\r\n            // probably is -- more testing should be done here for optimization\r\n            var internalQuickSort = function(left, right) {\r\n                do {\r\n                    var i = left;\r\n                    var j = right;\r\n                    var pivot = Math.floor((left + right) / 2);\r\n                    var p = source[pivot];\r\n                    do {\r\n                        while ((i < source.length) && (comparer(source[i], p, i, pivot) < 0)) {\r\n                            i++;\r\n                        }\r\n                        while ((0 <= j) && (comparer(p, source[j], pivot, j) < 0)) {\r\n                            j--;\r\n                        }\r\n                        if (i > j) {\r\n                            break; // left index has crossed right index, stop the loop\r\n                        }\r\n                        if (i < j) {\r\n                            source.swap(i, j); // swap the indexes in the source\r\n                        }\r\n                        i++;\r\n                        j--;\r\n                    } while (i <= j);\r\n                    if ((j - left) <= (right - i)) {\r\n                        if (left < j) {\r\n                            internalQuickSort(left, j);\r\n                        }\r\n                        left = i;\r\n                    }\r\n                    else {\r\n                        if (i < right) {\r\n                            internalQuickSort(i, right);\r\n                        }\r\n                        right = j;\r\n                    }\r\n                } while (left < right);\r\n            };\r\n            internalQuickSort(0, this.length-1);\r\n        };\r\n\r\n        /**\r\n            Sorts the original, given array in place \r\n            by using the quicksort algorithm with three-way partitioning.\r\n            \r\n            @this {Array}\r\n            @param {string|function} [predicate] A predicate used to determine whether one item is greater than, less than, or equal to another. If no predicate is defined, then the javascript > and < comparators are used.\r\n        */\r\n        arrays.quicksort3 = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (z.getType(predicate) === z.types.string) {\r\n                predicate = z.lambda(predicate);\r\n            }\r\n            else {\r\n                // dont accidentally take z.functions.identity - use this else statement\r\n                predicate = predicate || function(x, y) {\r\n                    return (x > y) ? 1 : ((x < y) ? -1 : 0);\r\n                };\r\n            }\r\n            var internalQuickSort = function(left, right) {\r\n                var indexForLessThan = left;\r\n                var indexForGreaterThan = right;\r\n                var pivot = source[left];\r\n                var indexForIterator = left+1;\r\n                while (indexForIterator <= indexForGreaterThan) {\r\n                    var cmp = predicate(source[indexForIterator], pivot);\r\n                    if (cmp < 0) {\r\n                        source.swap(indexForLessThan++, indexForIterator++);\r\n                    }\r\n                    else if (cmp > 0) {\r\n                        source.swap(indexForIterator, indexForGreaterThan--);\r\n                    }\r\n                    else {\r\n                        indexForIterator++;\r\n                    }\r\n                }\r\n                if (left < indexForLessThan-1) {\r\n                    internalQuickSort(left, indexForLessThan-1);\r\n                }\r\n                if (indexForGreaterThan+1 < right) {\r\n                    internalQuickSort(indexForGreaterThan+1, right);\r\n                }\r\n            };\r\n            internalQuickSort(0, this.length-1);\r\n        };\r\n\r\n        /**\r\n            Removes the first element from an array which matches a provided predicate.\r\n             \r\n            @param {array} source The source array from which to remove an element.\r\n            @param {function} predicate The method used to determine element removal.\r\n            @returns {array} The reference to the original array.\r\n        */\r\n        arrays.remove = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            predicate = z.lambda(predicate);\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (predicate(source[i])) {\r\n                    source.splice(i, 1);\r\n                }\r\n            }\r\n            return source;\r\n        };\r\n\r\n        /**\r\n            Removes elements from an array based on a provided predicate.\r\n            Traverses the array backwards, as it modifies the array which is currently being iterated.\r\n             \r\n            @param {array} source The source array.\r\n            @param {function|string} predicate The method or lambda string used to determine element removal.\r\n            @returns {number} The count of removed items.\r\n        */\r\n        arrays.removeAll = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            var removalCount = 0;\r\n            predicate = z.lambda(predicate);\r\n            for (var i = source.length-1; i > -1; i--) {\r\n                if (predicate(source[i])) {\r\n                    source.splice(i, 1);\r\n                    removalCount++;\r\n                }\r\n            }\r\n            return removalCount;\r\n        };\r\n\r\n        /**\r\n            Projects a selected set of elements from an array of objects into a new array of new objects.\r\n            \r\n            @param {array} source The source array.\r\n            @param {(string|function|string[])} selectors A property name, function for selecting properties, or an array of property names.\r\n            @returns {array} An array of objects, containing the properties specified by selectors.\r\n        */\r\n        arrays.select = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var result = [];\r\n            selector = z.lambda(selector);\r\n            for (var i = 0; i < source.length; i++) {\r\n                result.push(selector(source[i]));\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Shuffles an array using the Fisher-Yates algorithm.\r\n            Note that the original array in the provided reference will be shuffled.\r\n\r\n            @param {array} source The source array to be shuffled.\r\n            @returns {array} source The shuffled array.\r\n        */\r\n        arrays.shuffle = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            for (var i = source.length-1; i >= 0; i--) {\r\n                arrays.swap(source, i, Math.floor(Math.random() * i));\r\n            }\r\n            return source; // note that the original array will be shuffled -- return a reference to it anyways\r\n        };\r\n\r\n        /**\r\n            Takes and returns the items of the array\r\n            starting at the provided index.\r\n            \r\n            @param {array} source The source array over which to iterate.\r\n            @param {number} index The index to start at.\r\n            @returns {array} An array containing the taken items.\r\n        */\r\n        arrays.skip = function(/* source, index */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var index = arguments[argsIterator++];\r\n            var result = [];\r\n            if (index < 0) {\r\n                index = 0; // consider logic for negative skips skipping items from the back\r\n            }\r\n            for (var i = 0; i < source.length - index && index <= source.length; i++) {\r\n                result[i] = source[i+index];\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Internal method for assistance with recursively building\r\n            a set of subsets whose values all add up to the specified target.\r\n\r\n            @param {array<number>} remaining The remaining unused values array for which to calculate a set of subsets.\r\n            @param {number} target The target for each subset's sum.\r\n            @param {array<number>} partial The array containing a potential subset of numbers whose sum adds to the target.\r\n            @param {array<array<number>>} successes The reference to the array containing all successfully found subsets.\r\n            @returns {array<array<number>>} The set of subsets.\r\n        */\r\n        function _internalSubsetSum(remaining, target, selector, partial, successes) {\r\n            var s = partial.sum(selector);\r\n            if (s === target) {\r\n                successes.push(partial); // partial is a success!\r\n                return; // found a success - end of path\r\n            }\r\n            if (s > target) {\r\n                return; // too high - bad path\r\n            }\r\n            for (var i = 0; i < remaining.length; i++) {\r\n                var newRemaining = [];\r\n                var n = remaining[i];\r\n                for (var j = i+1; j < remaining.length; j++) {\r\n                    newRemaining.push(remaining[j]);\r\n                }\r\n                var newPartial = partial.deepCopy(); // will this be too inefficient? we could use slice for a shallow copy, if necessary\r\n                newPartial.push(n);\r\n                _internalSubsetSum(newRemaining, target, selector, newPartial, successes);\r\n            }\r\n            return successes;\r\n        }\r\n\r\n        /**\r\n            Builds an array of arrays, notating a set of subsets\r\n            whose values all add up to the specified target.\r\n\r\n            @param {array<number>} source The source array for which to calculate a set of subsets.\r\n            @param {number} target The target for each subset's sum.\r\n            @returns {array<array<number>>} The set of subsets.\r\n        */\r\n        arrays.subsetSum = function(/* source, target, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var target = arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            if (!z.check.isFunction(selector)) {\r\n                selector = z.functions.identity;\r\n                // source = source.select(selector);\r\n            }\r\n            return _internalSubsetSum(source, target, selector, [], []);\r\n        };\r\n\r\n        /**\r\n            Builds a summation of an array of numbers\r\n            or a given numeric property for an array of objects.\r\n            \r\n            @this {array}\r\n            @param {function|string} [selector] The method or lambda string used to select a property name for an array of objects.\r\n            @returns A summation of either the array itself, or the given property.\r\n        */\r\n        arrays.sum = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var sum = 0;\r\n            var i;\r\n            if (selector != null) {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    var selection = selector(source[i]);\r\n                    if (z.check.isNumber(selection)) {\r\n                        sum += selection;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (z.check.isNumber(source[i])) {\r\n                        sum += (source[i]);\r\n                    }\r\n                }\r\n            }\r\n            return sum;\r\n        };\r\n\r\n        /**\r\n            Swaps two array items located at the provided indices.\r\n            Note that the assertions can be dropped to improve performance.\r\n            \r\n            @this {array}\r\n            @param {number} indexA The first index.\r\n            @param {number} indexB The second index.\r\n            @returns {void}\r\n         */\r\n        arrays.swap = function(/* source, indexA, indexB */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var indexA = arguments[argsIterator++];\r\n            var indexB = arguments[argsIterator++];\r\n            var temp = source[indexA];\r\n            source[indexA] = source[indexB];\r\n            source[indexB] = temp;\r\n        };\r\n\r\n        /**\r\n            Takes the number of provided items from the array,\r\n            starting at the first element.\r\n            \r\n            @this {array}\r\n            @param {number} count The number of items to take.\r\n            @returns {array} An array containing the taken items.\r\n        */\r\n        arrays.take = function(/* source, count */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var count = arguments[argsIterator++];\r\n            var result = [];\r\n            if (count < 0) {\r\n                count = 0; // consider logic to allow negative count to count from the back of the array\r\n            }\r\n            for (var i = 0; i < count && i < source.length; i++) {\r\n                result[i] = source[i];\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Takes items from the array until\r\n            the predicate no longer matches.\r\n            \r\n            @this {array}\r\n            @param {function|string} predicate The method or lambda string used to determine when to halt collection from the source array.\r\n            @returns {array} An array containing the taken items.\r\n        */\r\n        arrays.takeWhile = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            var result = [];\r\n            predicate = z.lambda(predicate);\r\n            for (var i = 0; i < count; i++) {\r\n                if (!predicate(source[i])) break;\r\n                result.push(source[i]);\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Builds an array of objects from the original array which\r\n            contains items that meet the conditions given by the predicate.\r\n\r\n            Note that this is really the same thing as Array.filter.\r\n            \r\n            @this {array}\r\n            @param {function} predicate A predicate used to determine whether or not to take an object on the array.\r\n            @returns {array} A deep copied array of objects which match the predicate.\r\n        */\r\n        arrays.where = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            predicate = z.lambda(predicate);\r\n            var result = [];\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (predicate(source[i], i, source)) {\r\n                    result.push(source[i]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Builds a new array by executing a provided method \r\n            with the provided two arrays and placing the result the new array.\r\n            \r\n            @param {arr1} array The first array to use for the zipping method.\r\n            @param {arr2} array The second array to use for the zipping method.\r\n            @param {method} method The method used to execute and return a result using items on both of the original arrays.\r\n            @returns {array} An array with the zipped results.\r\n        */\r\n        arrays.zip = function(/* arr1, arr2, method */) {\r\n            var argsIterator = 0;\r\n            var arr1 = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var arr2 = arguments[argsIterator++];\r\n            var method = arguments[argsIterator++];\r\n            method = z.lambda(method);\r\n            var source = this;\r\n            var result = [];\r\n            for (var i = 0; i < source.length; i++) {\r\n                result.push(method(arr1[i], arr2[i]));\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable and non-writable properties\r\n            located on the Array.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initArrays = function(usePrototype) {\r\n            if (!!usePrototype) {\r\n                z.defineProperty(Array.prototype, \"aggregate\", { enumerable: false, writable: true, value: arrays.aggregate });\r\n                z.defineProperty(Array.prototype, \"any\", { enumerable: false, writable: true, value: arrays.any });\r\n                z.defineProperty(Array.prototype, \"average\", { enumerable: false, writable: true, value: arrays.average });\r\n                z.defineProperty(Array.prototype, \"contains\", { enumerable: false, writable: true, value: arrays.contains });\r\n                z.defineProperty(Array.prototype, \"count\", { enumerable: false, writable: true, value: arrays.count });\r\n                z.defineProperty(Array.prototype, \"deepCopy\", { enumerable: false, writable: true, value: _deepCopy });\r\n                z.defineProperty(Array.prototype, \"distinct\", { enumerable: false, writable: true, value: arrays.distinct });\r\n                z.defineProperty(Array.prototype, \"equals\", { enumerable: false, writable: true, value: _equals });\r\n                z.defineProperty(Array.prototype, \"first\", { enumerable: false, writable: true, value: arrays.first });\r\n                z.defineProperty(Array.prototype, \"flatten\", { enumerable: false, writable: true, value: arrays.flatten });\r\n                z.defineProperty(Array.prototype, \"innerJoin\", { enumerable: false, writable: true, value: arrays.innerJoin });\r\n                z.defineProperty(Array.prototype, \"isEmpty\", { enumerable: false, writable: true, value: arrays.isEmpty });\r\n                z.defineProperty(Array.prototype, \"isFull\", { enumerable: false, writable: true, value: arrays.isFull });\r\n                z.defineProperty(Array.prototype, \"last\", { enumerable: false, writable: true, value: arrays.last });\r\n                z.defineProperty(Array.prototype, \"max\", { enumerable: false, writable: true, value: arrays.max });\r\n                z.defineProperty(Array.prototype, \"min\", { enumerable: false, writable: true, value: arrays.min });\r\n                z.defineProperty(Array.prototype, \"mutate\", { enumerable: false, writable: true, value: arrays.mutate });\r\n                z.defineProperty(Array.prototype, \"orderBy\", { enumerable: false, writable: true, value: arrays.orderBy });\r\n                z.defineProperty(Array.prototype, \"quicksort\", { enumerable: false, writable: true, value: arrays.quicksort });\r\n                z.defineProperty(Array.prototype, \"quicksort3\", { enumerable: false, writable: true, value: arrays.quicksort3 });\r\n                z.defineProperty(Array.prototype, \"remove\", { enumerable: false, writable: true, value: arrays.remove });\r\n                z.defineProperty(Array.prototype, \"removeAll\", { enumerable: false, writable: true, value: arrays.removeAll });\r\n                z.defineProperty(Array.prototype, \"select\", { enumerable: false, writable: true, value: arrays.select });\r\n                z.defineProperty(Array.prototype, \"shuffle\", { enumerable: false, writable: true, value: arrays.shuffle });\r\n                z.defineProperty(Array.prototype, \"skip\", { enumerable: false, writable: true, value: arrays.skip });\r\n                z.defineProperty(Array.prototype, \"subsetSum\", { enumerable: false, writable: true, value: arrays.subsetSum });\r\n                z.defineProperty(Array.prototype, \"sum\", { enumerable: false, writable: true, value: arrays.sum });\r\n                z.defineProperty(Array.prototype, \"swap\", { enumerable: false, writable: true, value: arrays.swap });\r\n                z.defineProperty(Array.prototype, \"take\", { enumerable: false, writable: true, value: arrays.take });\r\n                z.defineProperty(Array.prototype, \"takeWhile\", { enumerable: false, writable: true, value: arrays.takeWhile });\r\n                z.defineProperty(Array.prototype, \"where\", { enumerable: false, writable: true, value: arrays.where });\r\n                z.defineProperty(Array.prototype, \"zip\", { enumerable: false, writable: true, value: arrays.zip });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}
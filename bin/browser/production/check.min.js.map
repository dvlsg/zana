{"version":3,"sources":["check.js"],"names":["factory","z","check","argsNotNull","i","arguments","length","exists","value","isArray","getType","types","array","isBoolean","isDate","date","isFunction","isGeneratorFunction","isGenerator","isIterable","iterator","symbols","prototype","isNonEmptyArray","isNumber","isNaN","isObject","object","isReference","generator","generatorFunction","regexp","isSmashable","args","Array","slice","call","baseType","targetType","isString","string","isType","type","isValue","number","undefined","root","window","global","this","define","amd","module","exports"],"mappings":"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","file":"check.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        /**\r\n            Container for all utility checking methods.\r\n            \r\n            @class Contains all utility checking methods.\r\n        */\r\n        var check = function() {};\r\n\r\n        /**\r\n            Checks that all of the arguments provided for a method existing.\r\n            \r\n            @param {string} var_args The arguments provided to a method.\r\n            @returns {boolean} True, if the check passes.\r\n        */\r\n        check.argsNotNull = function() {\r\n            for (var i = 0; i < arguments.length; i++) {\r\n                if (arguments[i] == null) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is not equal to null or undefined.\r\n            \r\n            @param {any} value The value to check for null or undefined values.\r\n            @returns {boolean} True, if the check passes.\r\n            @throws {error} An error is thrown if the value is equal to null or undefined.\r\n        */\r\n        check.exists = function(value) {\r\n            return value != null;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is an array type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isArray = function(value) {\r\n            return z.getType(value) === z.types.array;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a boolean type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isBoolean = function(value) {\r\n            return z.getType(value) === z.types.boolean;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a date type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isDate = function(value) {\r\n            return z.getType(value) === z.types.date;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a function type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isFunction = function(value) {\r\n            return z.getType(value) === z.types.function;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a generator function type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isGeneratorFunction = function(value) {\r\n            return z.getType(value) === z.types.function && value.isGenerator();\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is an iterable type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isIterable = function(value) {\r\n            if (!z.check.exists(value)) return false;\r\n            var iterator = value[z.symbols.iterator] || value.prototype[z.symbols.iterator]; // will this always be on prototype?\r\n            return z.getType(iterator) === z.types.function;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a non-empty array.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isNonEmptyArray = function(value) {\r\n            return (z.check.exists(value) && z.getType(value) === z.types.array && value.length > 0);\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a number type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isNumber = function(value) {\r\n            return !isNaN(value); \r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is an object type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isObject = function(value) {\r\n            return z.getType(value) === z.types.object;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a reference type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isReference = function(value) {\r\n            switch (z.getType(value)) {\r\n                case z.types.array:\r\n                case z.types.date:\r\n                case z.types.function:\r\n                case z.types.generator:\r\n                case z.types.generatorFunction:\r\n                case z.types.object:\r\n                case z.types.regexp:\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n            Checks that the provided arguments are all \r\n            the same type of either arrays, functions, or objects.\r\n            \r\n            @param {...array|object|function} var_args The items to check for smashability.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isSmashable = function(/* ... arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            if (args.length < 1)\r\n                return false;\r\n            var baseType = z.getType(args[0]);\r\n            if (!(baseType === z.types.array || baseType === z.types.object || baseType === z.types.function))\r\n                return false;\r\n            if (baseType === z.types.function)\r\n                baseType = z.types.object; // allow functions to be smashed onto objects, and vice versa\r\n            for (var i = 1; i < args.length; i++) {\r\n                var targetType = z.getType(args[i]);\r\n                if (targetType === z.types.function)\r\n                    targetType = z.types.object; // allow functions to be smashed onto objects, and vice versa\r\n                if (targetType !== baseType)\r\n                    return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a string type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isString = function(value) {\r\n            return z.getType(value) === z.types.string;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a provided type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @param {string} type The name of the type for which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isType = function(value, type) {\r\n            return z.getType(value) === type;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a value (non-reference) type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isValue = function(value) {\r\n            switch (z.getType(value)) {\r\n                case z.types.boolean:\r\n                case z.types.null: // value or reference?\r\n                case z.types.number:\r\n                case z.types.string:\r\n                case z.types.undefined: // value or reference?\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        };\r\n\r\n        z.check = check;\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}
{"version":3,"sources":["objects.js"],"names":["factory","z","objects","_deepCopy","deepCopy","this","_defineProperty","name","propertyDefinition","defineProperty","_equals","obj2","equals","_extend","args","Array","prototype","slice","call","arguments","unshift","extend","apply","_isEmpty","isEmpty","obj","prop","hasOwnProperty","_smash","smash","setup","initObjects","usePrototype","Object","enumerable","writable","value","root","window","global","define","amd","module","exports"],"mappings":"CAME,WACE,YACA,SAASA,GAAQC,GAEb,GAAIC,GAAUD,EAAEC,WASZC,EAAY,WACZ,MAAOF,GAAEG,SAASC,OAYlBC,EAAkB,SAASC,EAAMC,GACjC,MAAOP,GAAEQ,eAAeJ,KAAME,EAAMC,IAWpCE,EAAU,SAASC,GACnB,MAAOV,GAAEW,OAAOP,KAAMM,IAYtBE,EAAU,WACV,GAAIC,GAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAEtC,OADAL,GAAKM,QAAQf,MACNJ,EAAEC,QAAQmB,OAAOC,MAAM,KAAMR,GAUxCZ,GAAQmB,OAAS,WACb,MAAOpB,GAAEoB,OAAOC,MAAM,KAAMH,WAUhC,IAAII,GAAW,WACX,MAAOtB,GAAEC,QAAQsB,QAAQnB,MAU7BH,GAAQsB,QAAU,SAASC,GACvB,IAAK,GAAIC,KAAQD,GACb,GAAIA,EAAIE,eAAeD,GACnB,OAAO,CAEf,QAAO,EAYX,IAAIE,GAAS,WACT,GAAId,GAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAEtC,OADAL,GAAKM,QAAQf,MACNJ,EAAEC,QAAQ2B,MAAMP,MAAM,KAAMR,GAUvCZ,GAAQ2B,MAAQ,WACZ,MAAO5B,GAAE4B,MAAMP,MAAM,KAAMH,YAU/BlB,EAAE6B,MAAMC,YAAc,SAASC,GACrBA,IACF/B,EAAEQ,eAAewB,OAAOjB,UAAW,YAAckB,YAAY,EAAOC,UAAU,EAAMC,MAAOjC,IAC3FF,EAAEQ,eAAewB,OAAOjB,UAAW,kBAAoBkB,YAAY,EAAOC,UAAU,EAAMC,MAAO9B,IACjGL,EAAEQ,eAAewB,OAAOjB,UAAW,UAAYkB,YAAY,EAAOC,UAAU,EAAMC,MAAO1B,IACzFT,EAAEQ,eAAewB,OAAOjB,UAAW,UAAYkB,YAAY,EAAOC,UAAU,EAAMC,MAAOvB,IACzFZ,EAAEQ,eAAewB,OAAOjB,UAAW,WAAakB,YAAY,EAAOC,UAAU,EAAMC,MAAOb,IAC1FtB,EAAEQ,eAAewB,OAAOjB,UAAW,SAAWkB,YAAY,EAAOC,UAAU,EAAMC,MAAOR,MAQpG,GAAIS,GACkB,mBAAXC,QACHA,OACqB,mBAAXC,QACNA,OACElC,IAEQ,oBAAXmC,SAAgD,mBAAfA,QAAOC,KAE/CD,OAAO,WAAa,MAAOxC,KAC3BqC,EAAKpC,EAAIA,GAEc,mBAAXyC,QACkB,mBAAnBA,QAAOC,UACdD,OAAOC,QAAU3C,GAGE,mBAAXqC,GAAKpC,GAEjBD,EAAQqC,EAAKpC","file":"objects.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var objects = z.objects = {};\r\n        \r\n        /**\r\n            Creates a deep copy of an original object.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @returns A deep copy of the original object.\r\n         */\r\n        var _deepCopy = function() {\r\n            return z.deepCopy(this);\r\n        };\r\n\r\n        /**\r\n            Defines a property on this object.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @param {string} name The name of the property.\r\n            @param {any} prop The property to add.\r\n            @returns {void}\r\n         */\r\n        var _defineProperty = function(name, propertyDefinition) {\r\n            return z.defineProperty(this, name, propertyDefinition);\r\n        };\r\n\r\n        /**\r\n            Determines the equality of two objects.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @param {object} obj2 The second object to compare.\r\n            @returns True if both objects contain equal items, false if not.\r\n         */\r\n        var _equals = function(obj2) {\r\n            return z.equals(this, obj2);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided object arguments into the first object provided.\r\n            To be used for the Object.prototype extension.\r\n\r\n            @this {object}\r\n            @param {...object} var_args The tail objects to smash.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        var _extend = function(/* arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.objects.extend.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided object arguments into the first object provided.\r\n            \r\n            @param {...object} var_args The tail objects to use for extension.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        objects.extend = function(/* arguments */) {\r\n            return z.extend.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Determines if an object is empty.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @returns True if the object does contain any properties, false if not.\r\n         */\r\n        var _isEmpty = function() {\r\n            return z.objects.isEmpty(this);\r\n        };\r\n\r\n        /**\r\n            Determines if an object is empty.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @param {object} obj The object to check for emptiness.\r\n            @returns True if the object does contain any properties, false if not.\r\n         */\r\n        objects.isEmpty = function(obj) {\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop))\r\n                    return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided object arguments into a single object.\r\n            To be used for the Object.prototype extension.\r\n\r\n            @this {object}\r\n            @param {...object} var_args The tail objects to smash.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        var _smash = function(/* arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.objects.smash.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided object arguments into a single object.\r\n            \r\n            @param {...object} var_args The tail objects to smash.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        objects.smash = function(/* arguments */) {\r\n            return z.smash.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable but writable properties\r\n            located on the Object.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initObjects = function(usePrototype) {\r\n            if (!!usePrototype) {\r\n                z.defineProperty(Object.prototype, \"deepCopy\", { enumerable: false, writable: true, value: _deepCopy });\r\n                z.defineProperty(Object.prototype, \"defineProperty\", { enumerable: false, writable: true, value: _defineProperty });\r\n                z.defineProperty(Object.prototype, \"equals\", { enumerable: false, writable: true, value: _equals });\r\n                z.defineProperty(Object.prototype, \"extend\", { enumerable: false, writable: true, value: _extend });\r\n                z.defineProperty(Object.prototype, \"isEmpty\", { enumerable: false, writable: true, value: _isEmpty });\r\n                z.defineProperty(Object.prototype, \"smash\", { enumerable: false, writable: true, value: _smash });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}
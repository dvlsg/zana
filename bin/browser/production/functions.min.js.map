{"version":3,"sources":["functions.js"],"names":["factory","z","functions","curry","curried","args","length","sourceArgsLength","source","apply","concat","Array","prototype","slice","call","arguments","argsIterator","getType","this","types","assert","isFunction","sourceArgs","_deepCopy","deepCopy","_defineProperty","name","propertyDefinition","defineProperty","_equals","func2","equals","_extend","unshift","extend","getArgumentNames","s","toString","substring","indexOf","trim","split","map","val","index","arr","replace","getBody","_smash","smash","extendTo","obj","enumerable","writable","value","setup","initFunctions","usePrototype","Function","root","window","global","define","amd","module","exports"],"mappings":"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","file":"functions.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var functions = z.functions = z.functions || {}; // note that z.functions is already defined with defaults in base.js\r\n\r\n        /**\r\n            Curries a function, allowing it to accept\r\n            partial argument lists at differing times.\r\n\r\n            @source {function} The function to curry.\r\n            @returns The original curried function.\r\n        */\r\n        functions.curry = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.function ? this : arguments[argsIterator++];\r\n            z.assert.isFunction(source);\r\n            var sourceArgs = Array.prototype.slice.call(arguments);\r\n            var sourceArgsLength = source.length;\r\n\r\n            function curried(args) {\r\n                if (args.length >= sourceArgsLength) {\r\n                    return source.apply(null, args);\r\n                }\r\n                return function() {\r\n                    return curried(args.concat(Array.prototype.slice.call(arguments)));\r\n                };\r\n            }\r\n            return curried(sourceArgs);\r\n        };\r\n        \r\n        /**\r\n            Creates a deep copy of an original function.\r\n            To be used for the function.prototype extension.\r\n            \r\n            @this {function}\r\n            @returns A deep copy of the original function.\r\n        */\r\n        var _deepCopy = function() {\r\n            return z.deepCopy(this);\r\n        };\r\n\r\n        /**\r\n            Defines a property on this function.\r\n            To be used for the function.prototype extension.\r\n            \r\n            @this {function}\r\n            @param {string} name The name of the property.\r\n            @param {any} prop The property to add.\r\n            @returns {void}\r\n         */\r\n        var _defineProperty = function(name, propertyDefinition) {\r\n            return z.defineProperty(this, name, propertyDefinition);\r\n        };\r\n\r\n        /**\r\n            Determines the equality of two functions.\r\n            To be used for the function.prototype extension.\r\n            \r\n            @this {function}\r\n            @param {function} func2 The second function to compare.\r\n            @returns True if both functions contain equal items, false if not.\r\n         */\r\n        var _equals = function(func2) {\r\n            return z.equals(this, func2);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided function arguments into the first function provided.\r\n            To be used for the function.prototype extension.\r\n\r\n            @this {function}\r\n            @param {...function} var_args The tail functions to smash.\r\n            @returns {any} A deep copy of the extended functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not extendable.\r\n        */\r\n        var _extend = function(/* ...arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.functions.extend.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided function arguments into the first function provided.\r\n            \r\n            @param {...function} var_args The tail functions to use for extension.\r\n            @returns {any} A deep copy of the extended functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not extendable.\r\n        */\r\n        functions.extend = function(/* ...arguments */) {\r\n            return z.extend.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Returns the argument names for the function as an array.\r\n\r\n            @param {function} source The function for which to collect arguments.\r\n            @returns {array} An array containing any named arguments.\r\n        */\r\n        functions.getArgumentNames = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.function ? this : arguments[argsIterator++];\r\n            z.assert.isFunction(source);\r\n            var s = source.toString();\r\n            var args = s.substring(s.indexOf(\"(\")+1, s.indexOf(\")\")).trim().split(\",\");\r\n            args.map(function(val, index, arr) {\r\n                arr[index] = val.trim().replace(/(\\n)?\\/\\*\\*\\//g, \"\"); // new Function() will append /**/ to argument lists, sometimes with a new line\r\n            });\r\n            return args;\r\n        };\r\n\r\n        /**\r\n            Returns the body of the provided function as a string.\r\n\r\n            @param {function} source The function from which to collect the body.\r\n            @returns {string} A string representation of the function body.\r\n        */\r\n        functions.getBody = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.function ? this : arguments[argsIterator++];\r\n            z.assert.isFunction(source);\r\n            var s = source.toString();\r\n            return s.toString().substring(s.indexOf(\"{\")+1, s.indexOf(\"}\")).trim();\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided function arguments into a single function.\r\n            To be used for the function.prototype extension.\r\n\r\n            @this {function}\r\n            @param {...function|object} var_args The tail functions to smash.\r\n            @returns {any} A deep copy of the smashed functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not functions.\r\n        */\r\n        var _smash = function(/* ...arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.functions.smash.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided function arguments into a single function.\r\n            \r\n            @param {...function|object} var_args The tail functions to smash.\r\n            @returns {any} A deep copy of the smashed functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not functions.\r\n        */\r\n        functions.smash = function(/* ...arguments */) {\r\n            return z.smash.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Places all function extensions on the provided object or prototype.\r\n\r\n            @param {obj} object The object to be extended with function methods.\r\n        */\r\n        functions.extendTo = function(obj) {\r\n            z.defineProperty(obj, \"curry\", { enumerable: false, writable: true, value: functions.curry });\r\n            z.defineProperty(obj, \"deepCopy\", { enumerable: false, writable: true, value: _deepCopy });\r\n            z.defineProperty(obj, \"defineProperty\", { enumerable: false, writable: true, value: _defineProperty });\r\n            z.defineProperty(obj, \"equals\", { enumerable: false, writable: true, value: _equals });\r\n            z.defineProperty(obj, \"extend\", { enumerable: false, writable: true, value: _extend });\r\n            z.defineProperty(obj, \"getArgumentNames\", { enumerable: false, writable: true, value: functions.getArgumentNames });\r\n            z.defineProperty(obj, \"getBody\", { enumerable: false, writable: true, value: functions.getBody });\r\n            z.defineProperty(obj, \"smash\", { enumerable: false, writable: true, value: _smash });\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable and non-writable properties\r\n            located on the function.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initFunctions = function(usePrototype) {\r\n            if (!!usePrototype)\r\n                functions.extendTo(Function.prototype);\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}
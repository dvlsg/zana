{"version":3,"sources":["events.js"],"names":["factory","z","classes","Events","_eventList","emit","eventName","events","check","exists","i","length","ev","func","apply","Array","prototype","slice","call","arguments","clear","on","eventFunc","isFunction","eventList","currentEvent","push","deregister","removeAll","x","eventsObj","defineProperty","get","writeable","root","window","global","this","define","amd","module","exports"],"mappings":"CAME,WACE,YACA,SAASA,GAAQC,GAEbA,EAAEC,QAAUD,EAAEC,WAOd,IAAIC,GAAS,WAOT,QAASA,KAEL,GAAIC,MAUAC,EAAO,SAASC,GAChB,GAAIC,GAASH,EAAWE,EACxB,IAAIL,EAAEO,MAAMC,OAAOF,GACf,IAAK,GAAIG,GAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACpC,GAAIE,GAAKL,EAAOG,EACZT,GAAEO,MAAMC,OAAOG,EAAGC,OAClBD,EAAGC,KAAKC,MAAM,KAAMC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,MAatEC,EAAQ,SAASd,GACjBL,EAAEO,MAAMC,OAAOH,GACfF,EAAWE,GAAa,MAWxBe,EAAK,SAASf,EAAWgB,GACzBrB,EAAEO,MAAMC,OAAOH,GACfL,EAAEO,MAAMe,WAAWD,EACnB,IAAIE,GAAapB,EAAWE,KAAeF,EAAWE,OAClDmB,GACAZ,KAAMS,EAEVE,GAAUE,KAAKD,EACf,IAAIE,GAAa,WACbvB,EAAWE,GAAWsB,UAAU,SAASC,GAAK,MAAOA,KAAMJ,IAE/D,OAAOE,GAWX,OAAO,UAAUG,GAIb,MAHA7B,GAAE8B,eAAeD,EAAW,QAAUE,IAAK,WAAa,MAAO3B,IAAS4B,WAAW,IACnFhC,EAAE8B,eAAeD,EAAW,SAAWE,IAAK,WAAa,MAAOZ,IAAUa,WAAW,IACrFhC,EAAE8B,eAAeD,EAAW,MAAQE,IAAK,WAAa,MAAOX,IAAOY,WAAW,IACxEH,OAKf,MAAO3B,KAIXF,GAAEC,QAAQC,OAASA,EACnBF,EAAEM,OAAS,GAAIN,GAAEC,QAAQC,OAM7B,GAAI+B,GACkB,mBAAXC,QACHA,OACqB,mBAAXC,QACNA,OACEC,IAEQ,oBAAXC,SAAgD,mBAAfA,QAAOC,KAE/CD,OAAO,WAAa,MAAOtC,KAC3BkC,EAAKjC,EAAIA,GAEc,mBAAXuC,QACkB,mBAAnBA,QAAOC,UACdD,OAAOC,QAAUzC,GAGE,mBAAXkC,GAAKjC,GAEjBD,EAAQkC,EAAKjC","file":"events.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        /**\r\n            A wrapper class used to register and execute custom named events.\r\n\r\n            @class Contains an internal list of registered events.\r\n        */\r\n        var Events = (function() {\r\n\r\n            /**\r\n                Creates a new Events class.\r\n\r\n                @constructor\r\n            */\r\n            function Events() {\r\n\r\n                var _eventList = [];\r\n\r\n                /**\r\n                    Calls any registered functions under the given event name,\r\n                    passing any additional provided arguments to those functions.\r\n\r\n                    @param {string} eventName The name of the event to emit.\r\n                    @param {...any} var_args The arguments to pass to each of the registered events.\r\n                    @returns {void}\r\n                */\r\n                var emit = function(eventName) {\r\n                    var events = _eventList[eventName];\r\n                    if (z.check.exists(events)) {\r\n                        for (var i = 0; i < events.length; i++) {\r\n                            var ev = events[i];\r\n                            if (z.check.exists(ev.func)) {\r\n                                ev.func.apply(null, Array.prototype.slice.call(arguments, 1));\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                /**\r\n                    Clears all registered functions for a given event name.\r\n                    passing any additional provided arguments to those functions.\r\n\r\n                    @param {string} eventName The name of the event for which to clear events.\r\n                    @returns {void}\r\n                */\r\n                var clear = function(eventName) {\r\n                    z.check.exists(eventName);\r\n                    _eventList[eventName] = null;\r\n                };\r\n\r\n                /**\r\n                    Registers a function for a provided event name.\r\n                    passing any additional provided arguments to those functions.\r\n\r\n                    @param {string} eventName The name of the event on which to register the function.\r\n                    @param {function} eventFunc The function to register for the event.\r\n                    @returns {function} The function used to deregister the event which was just registered.\r\n                */\r\n                var on = function(eventName, eventFunc) {\r\n                    z.check.exists(eventName);\r\n                    z.check.isFunction(eventFunc);\r\n                    var eventList = (_eventList[eventName] || (_eventList[eventName] = []));\r\n                    var currentEvent = {\r\n                        func: eventFunc\r\n                    };\r\n                    eventList.push(currentEvent);\r\n                    var deregister = function() {\r\n                        _eventList[eventName].removeAll(function(x) { return x === currentEvent; }); // remove only by reference\r\n                    };\r\n                    return deregister;\r\n                };\r\n\r\n                /**\r\n                    Extends an object into a events interface with\r\n                    the pre-determined, privately stored properties,\r\n                    returning it back to the original Events() call.\r\n\r\n                    @param {object} eventsObj The object to extend with Events properties.\r\n                    @returns {object} The extended object.\r\n                */\r\n                return (function(eventsObj) {\r\n                    z.defineProperty(eventsObj, \"emit\", { get: function() { return emit; }, writeable: false });\r\n                    z.defineProperty(eventsObj, \"clear\", { get: function() { return clear; }, writeable: false });\r\n                    z.defineProperty(eventsObj, \"on\", { get: function() { return on; }, writeable: false });\r\n                    return eventsObj;\r\n                })({});\r\n\r\n            }\r\n\r\n            return Events;\r\n\r\n        })();\r\n\r\n        z.classes.Events = Events;\r\n        z.events = new z.classes.Events();\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}
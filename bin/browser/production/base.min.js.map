{"version":3,"sources":["base.js"],"names":["undefined","Zana","z","RecursiveCounter","maxStackDepth","this","xStack","yStack","count","prototype","push","x","y","pop","getType","value","t","constructor","Array","String","Number","Boolean","RegExp","Date","coalesce","args","slice","call","arguments","i","length","check","exists","deepCopy","origSource","_singleCopy","sourceRef","copyRef","origIndex","rc","indexOf","forEach","key","_deepCopy","_funcCopy","source","temp","apply","Error","stackMaxDepth","types","object","Object","create","getPrototypeOf","array","regexp","date","toString","defineProperty","obj","name","prop","console","error","equals","_compareObject","xKeys","keys","yKeys","quicksort","_equals","k","xType","yType","xIndex","lastIndexOf","yIndex","getTime","_extend","a","b","val","isSmashable","extend","item","method","context","itemType","hasOwnProperty","_smash","smash","lambda","expression","functions","identity","string","setup","settings","initArrays","useArrayExtensions","initFunctions","useFunctionExtensions","initNumbers","useNumberExtensions","initObjects","useObjectExtensions","initLogger","defaultLogger","true","false","empty","matcher","boolean","function","null","number","root","window","global","define","amd","module","exports"],"mappings":"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","file":"base.min.js","sourcesContent":["/**\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    /**\r\n        The main container for all zUtil items.\r\n\r\n        @param [object] settings An optional set of settings to define items.\r\n        @param [boolean] settings.useArrayExtensions A boolean flag to determine whether or not to extend Array.prototype.\r\n        @param [boolean] settings.useObjectExtensions A boolean flag to determine whether or not to extend Object.prototype.\r\n        @param [object] settings.defaultLogger An object which defines all of the required logger fields to be used by zUtil.log.\r\n    */\r\n    function Zana(/* settings */) {\r\n        // this.setup(settings);\r\n    }\r\n    var z = new Zana();\r\n\r\n    /**\r\n        Class for containing a max reference counter\r\n        as well as two stacks of references to objects.\r\n        To be used with deepCopy and equals.\r\n        \r\n        @class Contains two reference stacks as well as a defined max stack depth.\r\n    */\r\n    var RecursiveCounter = (function() {\r\n        function RecursiveCounter(maxStackDepth) {\r\n            this.xStack = [];\r\n            this.yStack = [];\r\n            this.count = 0;\r\n            this.maxStackDepth = maxStackDepth;\r\n        }\r\n        RecursiveCounter.prototype.push = function(x, y) {\r\n            this.xStack.push(x);\r\n            this.yStack.push(y);\r\n            this.count++;\r\n        };\r\n        RecursiveCounter.prototype.pop = function() {\r\n            this.xStack.pop();\r\n            this.yStack.pop();\r\n            this.count--;\r\n        };\r\n        return RecursiveCounter;\r\n    })();\r\n\r\n    /**\r\n        Collects the type for a given value.\r\n        \r\n        @param {any} value The value from which to collect the type.\r\n        @returns {string} The type of the value.\r\n    */\r\n    z.getType = function(value) {\r\n        var t = typeof value;\r\n        if (t !== 'object')\r\n            return t;\r\n        if (value === null)\r\n            return 'null';\r\n        switch(value.constructor) {\r\n            case Array:     return 'array';\r\n            case String:    return 'string';\r\n            case Number:    return 'number';\r\n            case Boolean:   return 'boolean';\r\n            case RegExp:    return 'regexp';\r\n            case Date:      return 'date';\r\n        }\r\n        return 'object';\r\n    };\r\n\r\n    /**\r\n        Returns the first non-null or non-undefined argument.\r\n\r\n        @param {...any} var_args The list of arguments to check for existence.\r\n        @returns {any} If no arguments exist then null, else the existing argument.\r\n    */\r\n    z.coalesce = function(/* arguments */) {\r\n        var args = Array.prototype.slice.call(arguments);\r\n        for (var i = 0; i < args.length; i++) {\r\n            if (z.check.exists(args[i])) {\r\n                return args[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n        Builds a deep copy of the provided source.\r\n        \r\n        @param {any} origSource The item from which to build the deep copy.\r\n        @returns {any} The copy of the provided source.\r\n        @throws {error} An error is thrown if the recursive object stack grows greater than 1000.\r\n    */\r\n    z.deepCopy = function(origSource) {\r\n        var origIndex = -1;\r\n        var rc = new RecursiveCounter(1000);\r\n\r\n        function _singleCopy(sourceRef, copyRef) {\r\n            origIndex = rc.xStack.indexOf(sourceRef);\r\n            if (origIndex === -1) {\r\n                rc.push(sourceRef, copyRef);\r\n                z.forEach(sourceRef, function(value, key) {\r\n                    copyRef[key] = _deepCopy(value);\r\n                });\r\n                rc.pop();\r\n                return copyRef;\r\n            }\r\n            else {\r\n                // source item has already been copied\r\n                // return the reference to the copied item\r\n                return rc.yStack[origIndex];\r\n            }\r\n        }\r\n\r\n        function _funcCopy(source) {\r\n            // rebuild the function from the original body and arguments\r\n            // var s = source.toString();\r\n            // var args = s.substring(s.indexOf(\"(\")+1, s.indexOf(\")\")).trim().split(\",\");\r\n            // args.map(function(val, index, arr) {\r\n            //     arr[index] = val.trim();\r\n            // });\r\n            // var body = s.substring(s.indexOf(\"{\")+1, s.indexOf(\"}\")).trim();\r\n            // var anonymous = new Function(args, body); // may need to consider the \"this\" property\r\n            // // make sure we collect any properties which may have been set on the function\r\n\r\n            var temp = function() { return source.apply(source, arguments); };\r\n            z.forEach(source, function(x, key) {\r\n                temp[key] = _deepCopy(x);\r\n            });\r\n\r\n            return _singleCopy(source, temp);\r\n\r\n            // return _singleCopy(source, anonymous);\r\n        }\r\n\r\n        function _deepCopy(source) {\r\n            if (rc.count > rc.maxStackDepth) throw new Error(\"Stack depth exceeded: \" + rc.stackMaxDepth + \"!\");\r\n            switch (z.getType(source)) {\r\n                case z.types.object:\r\n                    return _singleCopy(source, Object.create(Object.getPrototypeOf(source)));\r\n                case z.types.array:\r\n                    return _singleCopy(source, []);\r\n                case z.types.regexp:\r\n                    return _singleCopy(source, new RegExp(source));\r\n                case z.types.date:\r\n                    return _singleCopy(source, new Date(source.toString()));\r\n                case z.types.function:\r\n                    return _funcCopy(source);\r\n                default: // need to handle functions differently?\r\n                    return source;\r\n            }\r\n        }\r\n        return _deepCopy(origSource);\r\n    };\r\n\r\n    /**\r\n        Defines a property on this provided item.\r\n        \r\n        @this {object}\r\n        @param {any} obj The item to which to add the property.\r\n        @param {string} name The name of the property.\r\n        @param {any} prop The property to add.\r\n        @returns {void}\r\n    */\r\n    z.defineProperty = function(obj, name, prop) {\r\n        if (obj[name] == null) {\r\n            Object.defineProperty(obj, name, prop); \r\n        }\r\n        else {\r\n            console.error(\r\n                \"Error: the method \" \r\n                + name\r\n                + \" has already been defined on the following object: \" \r\n                + obj\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n        Compares the equality of two provided items.\r\n        \r\n        @param {any} x The first item to compare.\r\n        @param {any} y The second item to compare.\r\n        @returns {boolean} True if the provided values are equal, false if not.\r\n        @throws {error} An error is thrown if the recursive function stack grows greater than 1000.\r\n    */\r\n    z.equals = function(x, y) {\r\n        var rc = new RecursiveCounter(1000);\r\n\r\n        function _compareObject(x, y) {\r\n            // check for reference equality\r\n            if (x === y) {\r\n                return true;\r\n            }\r\n            var xKeys = Object.keys(x);\r\n            var yKeys = Object.keys(y);\r\n            xKeys.quicksort();\r\n            yKeys.quicksort();\r\n            if (!_equals(xKeys, yKeys)) {\r\n                return false;\r\n            }\r\n            rc.push(x, y);\r\n            for (var k in x) {\r\n                if (!_equals(x[k], y[k])) {\r\n                    return false;\r\n                }\r\n            }\r\n            rc.pop();\r\n            return true;\r\n        }\r\n\r\n        function _equals(x, y) {\r\n            if (rc.count > rc.maxStackDepth) throw new Error(\"Stack depth exceeded: \" + rc.maxStackDepth + \"!\");\r\n            // check for reference and primitive equality\r\n            if (x === y) {\r\n                return true;\r\n            }\r\n            // check for type equality\r\n            var xType = z.getType(x);\r\n            var yType = z.getType(y);\r\n            if (xType !== yType) {\r\n                return false;\r\n            }\r\n            // check for circular references\r\n            var xIndex = rc.xStack.lastIndexOf(x);\r\n            var yIndex = rc.yStack.lastIndexOf(y);\r\n            if (xIndex !== -1) {\r\n                if (yIndex !== -1) {\r\n                    // don't care about object reference equality\r\n                    // when checking for object equality\r\n                    return true;\r\n                    // if we do care about object reference equality,\r\n                    // then a strict comparison of stack location of objects\r\n                    // needs to be executed and returned\r\n                }\r\n            }\r\n            // check for inequalities\r\n            switch(xType) {\r\n                case z.types.date:\r\n                    if (x.getTime() !== y.getTime()) {\r\n                        return false;\r\n                    }\r\n                    // check for extra properties stored on the Date object\r\n                    if (!_compareObject(x, y)) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case z.types.function:\r\n                    // if (!z.equals(z.functions.getBody(x), z.functions.getBody(y))) {\r\n                    //     // function body mismatch\r\n                    //     return false;\r\n                    // }\r\n                    // if (!z.equals(z.functions.getArgumentNames(x), z.functions.getArgumentNames(y))) {\r\n                    //     // function arguments mismatch\r\n                    //     return false;\r\n                    // }\r\n                    if (!_compareObject(x, y)) {\r\n                        // property mismatch on function\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case z.types.array:\r\n                    if (x.length !== y.length) {\r\n                        return false;\r\n                    }\r\n                    rc.push(x, y);\r\n                    for (var i = 0; i < x.length; i++) {\r\n                        if (!_equals(x[i], y[i])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    rc.pop();\r\n                    break;\r\n                case z.types.object:\r\n                case z.types.regexp:\r\n                    if (!_compareObject(x, y)) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (x !== y) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n            }\r\n            return true;\r\n        }\r\n        return _equals(x, y);\r\n    };\r\n\r\n    /**\r\n        Internal extend call.\r\n        Performance abstraction to bypass all the argument shenanigans,\r\n        as we know we will only be extending two items at a time internally.\r\n\r\n        @param {any} a The item on which to extend the second.\r\n        @param {any} b The item to extend onto the first.\r\n        @returns {any} The reference to the first item.\r\n    */\r\n    var _extend = function(a, b) {\r\n        z.forEach(b, function(val, key) {\r\n            if (!z.check.exists(a[key]))\r\n                a[key] = b[key];\r\n            else if (z.check.isSmashable(a[key], b[key]))\r\n                _extend(a[key], b[key]);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Extends the properties on the provided arguments into the original item.\r\n        Any properties on the tail arguments will not overwrite\r\n        any properties on the first argument, and any references will be shallow.\r\n        \r\n        @param {any} a The target to be extended.\r\n        @param {...any} var_args The tail items to extend onto the target.\r\n        @returns {any} A reference to the extended target.\r\n    */\r\n    z.extend = function(a /*, b, b2, ... n */) {\r\n        Array.prototype.slice.call(arguments, 1).forEach(function(b) {\r\n            if (z.check.isSmashable(a, b))\r\n                _extend(a, b);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Iterates over an iterable object or array,\r\n        calling the provided method with the provided optional context,\r\n        as well as the value and the key for the current item.\r\n\r\n        @param {object|array|date|regexp} item The item over which to iterate.\r\n        @param {function} method The method to call for each iterated item.\r\n        @param {object} context The context to set to \"this\" for the method.\r\n        @returns {object|array|date|regexp} The reference to the original item.\r\n    */\r\n    z.forEach = function(item, method, context) {\r\n        var itemType = z.getType(item);\r\n        switch(itemType) {\r\n            case z.types.date:\r\n            case z.types.function:\r\n            case z.types.object:\r\n            case z.types.regexp:\r\n                for (var key in item) {\r\n                    if (item.hasOwnProperty(key)) {\r\n                        method.call(context, item[key], key, item);\r\n                    }\r\n                }\r\n                break;\r\n            case z.types.arguments:\r\n            case z.types.array:\r\n                for (var i = 0; i < item.length; i++) {\r\n                    method.call(context, item[i], i, item);\r\n                }\r\n                break;\r\n        }\r\n        return item;\r\n    };\r\n\r\n    /**\r\n        Internal smash call.\r\n        Performance abstraction to bypass all the argument shenanigans,\r\n        as we know we will only be smashing two items at a time internally.\r\n\r\n        @param {any} a The item on which to smash the second.\r\n        @param {any} b The item to smash onto the first.\r\n        @returns {any} The reference to the first item.\r\n    */\r\n    var _smash = function(a, b) {\r\n        z.forEach(b, function(val, key) {\r\n            if (z.check.isSmashable(a[key], b[key]))\r\n                _smash(a[key], b[key]);\r\n            else\r\n                a[key] = z.deepCopy(b[key]);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Smashes the properties on the provided arguments into the first argument.\r\n        Any properties on the tail arguments will overwrite\r\n        any existing properties on the first argument.\r\n        \r\n        @param {any} a The target to be smashed.\r\n        @param {...any} var_args The tail items to smash onto the target.\r\n        @returns {any} A reference to the smashed target.\r\n    */\r\n    z.smash = function(a /*, b, b2, ... n */) {\r\n        Array.prototype.slice.call(arguments, 1).forEach(function(b) {\r\n            if (z.check.isSmashable(a, b))\r\n                _smash(a, b);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Converts a string representation of a \r\n        lambda function into a javascript function\r\n    \r\n        Note: This is awkward and inefficient, and should absolutely be replaced\r\n        by arrow functions when ECMAScript 6 is available.\r\n        \r\n        @param {null|function|string} [expression] The string representation of the expression to convert into a function.\r\n        @returns {function} \r\n             If a string expression is provided, the function for the expression. \r\n             If a function is provided, then return the function.\r\n             If expression is null or undefined, return functions.identity.\r\n     */\r\n    z.lambda = function(expression) {\r\n        if (expression == null) {\r\n            return z.functions.identity;\r\n        }\r\n        else if (z.getType(expression) === z.types.function) {\r\n            return expression;\r\n        }\r\n        else if (z.getType(expression) === z.types.string) {\r\n            if (z.equals(expression, \"\")) {\r\n                return z.functions.identity;\r\n            }\r\n            // else if (expression.indexOf(\"=>\") > -1) {\r\n            //     var match = expression.match(z.functions.matcher);\r\n            //     var args = match[1] || [];\r\n            //     var body = match[2];\r\n            //     return new Function(args, \"return \" + body + \";\").bind(arguments.callee.caller);\r\n            // }\r\n        }\r\n        // throw error or assume equality check? \r\n        // see unitTests.removeAll for methods using the default equals\r\n        return function(x) { return z.equals(expression, x); }; \r\n    };\r\n\r\n    /**\r\n        Executes setup methods based on the provided settings object.\r\n         \r\n        @param {object} settings The settings object.\r\n        @param {boolean} [settings.useArrayExtensions]  A boolean flag used to determine whether or not to extend Array.prototype.\r\n        @param {boolean} [settings.useNumberExtensions] A boolean flag used to determine whether or not to extend Number.prototype.\r\n        @param {boolean} [settings.useObjectExtensions] A boolean flag used to determine whether or not to extend Object.prototype.\r\n        @param {object} [settings.defaultLogger] The default logger interface to apply to the default zUtil.log class.\r\n    */\r\n    z.setup = function(settings) {\r\n        settings = settings || {};\r\n        if (z.setup.initArrays)\r\n            z.setup.initArrays(settings.useArrayExtensions);\r\n        if (z.setup.initFunctions)\r\n            z.setup.initFunctions(settings.useFunctionExtensions);\r\n        if (z.setup.initNumbers)\r\n            z.setup.initNumbers(settings.useNumberExtensions);\r\n        if (z.setup.initObjects)\r\n            z.setup.initObjects(settings.useObjectExtensions);\r\n        if (z.setup.initLogger)\r\n            z.setup.initLogger(settings.defaultLogger);\r\n    };\r\n\r\n    /**\r\n        Define constants for the library.\r\n     */\r\n    z.functions = {\r\n        \"identity\": function(x) { return x; }\r\n        , \"true\": function() { return true; }\r\n        , \"false\": function() { return false; }\r\n        , \"empty\": function() { }\r\n        , \"matcher\": /^(?:[(\\s*]*)?(\\w+(?:,\\s*\\w+)*)?(?:[)\\s*]*)?=>(?:\\s*)?(.*)$/\r\n    };\r\n    z.types = {\r\n        \"arguments\":    z.getType(arguments) \r\n        , \"array\":      z.getType([])\r\n        , \"boolean\":    z.getType(true)\r\n        , \"date\":       z.getType(new Date())\r\n        , \"function\":   z.getType(function(){})\r\n        , \"null\":       z.getType(null)\r\n        , \"number\":     z.getType(0)\r\n        , \"object\":     z.getType({})\r\n        , \"string\":     z.getType(\"\")\r\n        , \"regexp\":     z.getType(new RegExp())\r\n        , \"undefined\":  z.getType(undefined)\r\n    };\r\n\r\n    return (function() {\r\n        var root = (\r\n            typeof window !== 'undefined' ?\r\n                window\r\n                : typeof global !== 'undefined' ?\r\n                    global \r\n                    : this\r\n        );\r\n        if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n            root.z = z;\r\n            define(function() {\r\n                return z;\r\n            });\r\n        }\r\n        else if (typeof module !== 'undefined') {\r\n            if (typeof module.exports !== 'undefined') {\r\n                module.exports = z;\r\n            }\r\n        }\r\n        else {\r\n            // assume browser, expose to root\r\n            root.z = z;\r\n        }\r\n        return z;\r\n    })();\r\n})();"],"sourceRoot":"/source/"}
{"version":3,"sources":["assert.js"],"names":["undefined","factory","z","classes","AssertionError","message","this","Error","captureStackTrace","constructor","name","prototype","Object","create","value","enumerable","writable","configurable","assert","condition","getType","types","functionString","toString","functionBody","substring","indexOf","lastIndexOf","trim","String","argsNotNull","check","apply","arguments","exists","isArray","isBoolean","isDate","isFunction","isNonEmptyArray","isNumber","isObject","isReference","isSmashable","args","isString","isType","type","isValue","Asserter","newAsserter","defineProperty","get","writeable","root","window","global","define","amd","module","exports"],"mappings":"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","file":"assert.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        /*\r\n            AssertionError extension of Error, since certain libraries (eg gulp-mocha)\r\n            expect any assertion errors to be thrown to have a name of 'AssertionError'.\r\n        */\r\n        var AssertionError = function(message) {\r\n            if (!this instanceof AssertionError)\r\n                return new AssertionError(message);\r\n            if (Error && Error.captureStackTrace)\r\n                Error.captureStackTrace(this, this.constructor); // NodeJS style stack trace\r\n            this.name = 'AssertionError';\r\n            this.message = message || 'Unknown AssertionError';\r\n        };\r\n        AssertionError.prototype = Object.create(Error.prototype, {\r\n            constructor: {\r\n                value: AssertionError,\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true\r\n            }\r\n        });\r\n\r\n        /**\r\n            Executes an assertion for a given condition.\r\n            \r\n            @param {boolean|function} condition The item used to determine whether or not an assertion passed.\r\n            @param {string} [message] The overridden message to use when throwing an error. If none is provided, then the condition is used as a message.\r\n            @returns {void}\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var assert = function(condition, message) {\r\n            // var parent = arguments.callee.caller;\r\n            if (z.getType(condition) === z.types.function) {\r\n                if (!condition()) {\r\n                    if (message) throw new Error(message);\r\n                    else {\r\n                        var functionString = condition.toString();\r\n                        var functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\")).trim();\r\n                        throw new AssertionError(\"Assertion failed: \" + functionBody);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!condition) {\r\n                    if(message) throw new AssertionError(message);\r\n                    else        throw new AssertionError(\"Assertion failed: \" + String(condition));\r\n                } // end if (!condition)\r\n            }\r\n        };\r\n\r\n        /**\r\n            Asserts that all of the arguments provided for a method existing.\r\n            \r\n            @param {string} var_args The arguments provided to a method.\r\n            @returns {boolean} True, if the assertion passes.\r\n        */\r\n        var argsNotNull = function() {\r\n            assert(function() { return z.check.argsNotNull.apply(this, arguments); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is not equal to null or undefined.\r\n            \r\n            @param {any} value The value to check for null or undefined values.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the value is equal to null or undefined.\r\n        */\r\n        var exists = function(value) {\r\n            assert(function() { return z.check.exists(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is an array type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isArray = function(value) {\r\n            assert(function() { return z.check.isArray(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a boolean type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isBoolean = function(value) {\r\n            assert(function() { return z.check.isBoolean(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a date type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isDate = function(value) {\r\n            assert(function() { return z.check.isDate(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a function type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isFunction = function(value) {\r\n            assert(function() { return z.check.isFunction(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a non-empty array.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isNonEmptyArray = function(value) {\r\n            assert(function() { return z.check.isNonEmptyArray(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a number type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isNumber = function(value) {\r\n            assert(function() { return z.check.isNumber(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is an object type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isObject = function(value) {\r\n            assert(function() { return z.check.isObject(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a reference type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isReference = function(value) {\r\n            assert(function() { return z.check.isReference(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided arguments are all \r\n            the same type of either arrays, functions, or objects.\r\n            \r\n            @param {...array|object|function} var_args The items to check for smashability.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isSmashable = function(/* ... arguments */) {\r\n            var args = arguments; // keep a pointer, so we can pass them into the anonymous function\r\n            assert(function() { return z.check.isSmashable.apply(undefined, args); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a string type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True if the value is a string, false if not.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isString = function(value) {\r\n            assert(function() { return z.check.isString(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a provided type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @param {string} type The name of the type for which to check.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isType = function(value, type) {\r\n            assert(function() { return z.check.isType(value, type); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a value (non-reference) type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isValue = function(value) {\r\n            assert(function() { return z.check.isValue(value); });\r\n        };\r\n\r\n\r\n        /**\r\n            A wrapper class used to hold and execute different assertion methods.\r\n\r\n            @class Contains a provided set of assertions.\r\n         */\r\n        var Asserter = (function() {\r\n\r\n            /**\r\n                Creates a new Asserter class.\r\n\r\n                @constructor\r\n                @param {object} logger The interface containing the expected log methods.\r\n                @param {bool} [enableDebugLogging] An override for enabling debug logging on Log class creation.\r\n            */\r\n            function Asserter() {\r\n\r\n                /**\r\n                    Extends a function into an Asserter interface with\r\n                    the pre-determined, privately stored properties,\r\n                    returning it back to the original Asserter() call.\r\n\r\n                    @returns {function} The extended function.\r\n                */\r\n                return (function(newAsserter) {\r\n                    /**\r\n                        The base Asserter function to be returned.\r\n                        Note that the base function can be called\r\n                        as a pass-through method for _assert without\r\n                        needing to directly call LogInterface.log()\r\n\r\n                        @param {any} [x] The item to extend and return to the Asserter class.\r\n                        @returns {any} The extended item.\r\n                    */\r\n                    z.defineProperty(newAsserter, \"argsNotNull\", { get: function() { return argsNotNull; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"exists\", { get: function() { return exists; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isArray\", { get: function() { return isArray; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isBoolean\", { get: function() { return isBoolean; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isDate\", { get: function() { return isDate; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isFunction\", { get: function() { return isFunction; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isNonEmptyArray\", { get: function() { return isNonEmptyArray; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isNumber\", { get: function() { return isNumber; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isObject\", { get: function() { return isObject; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isReference\", { get: function() { return isReference; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isSmashable\", { get: function() { return isSmashable; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isString\", { get: function() { return isString; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isType\", { get: function() { return isType; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isValue\", { get: function() { return isValue; }, writeable: false });\r\n                    return newAsserter;\r\n                })(assert);\r\n            }\r\n\r\n            return Asserter;\r\n            \r\n        })();\r\n\r\n        z.classes.Asserter = Asserter;\r\n        z.assert = new z.classes.Asserter(); // add a default Log using the console as the logging interface\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}
{"version":3,"sources":["base.js","arrays.js","assert.js","check.js","convert.js","events.js","functions.js","location.js","log.js","numbers.js","objects.js","stopwatch.js"],"names":["undefined","Zana","z","RecursiveCounter","maxStackDepth","this","xStack","yStack","count","prototype","push","x","y","pop","getType","value","t","constructor","Array","String","Number","Boolean","RegExp","Date","coalesce","args","slice","call","arguments","i","length","check","exists","deepCopy","origSource","_singleCopy","sourceRef","copyRef","origIndex","rc","indexOf","forEach","key","_deepCopy","_funcCopy","source","temp","apply","Error","stackMaxDepth","types","object","Object","create","getPrototypeOf","array","regexp","date","toString","defineProperty","obj","name","prop","console","error","equals","_compareObject","xKeys","keys","yKeys","quicksort","_equals","k","xType","yType","xIndex","lastIndexOf","yIndex","getTime","_extend","a","b","val","isSmashable","extend","item","method","context","itemType","hasOwnProperty","_smash","smash","lambda","expression","functions","identity","string","setup","settings","initArrays","useArrayExtensions","initFunctions","useFunctionExtensions","initNumbers","useNumberExtensions","initObjects","useObjectExtensions","initLogger","defaultLogger","true","false","empty","matcher","boolean","function","null","number","root","window","global","define","amd","module","exports","factory","_internalSubsetSum","remaining","target","selector","partial","successes","s","sum","newRemaining","n","j","newPartial","arrays","aggregate","argsIterator","func","seed","assert","isNonEmptyArray","result","any","predicate","average","contains","comparer","isFunction","distinct","arr2","first","_flatten","input","output","current","isArray","flatten","innerJoin","leftArray","rightArray","on","isObject","isEmpty","isFull","last","max","selected","maxValue","MIN_VALUE","isNumber","min","minValue","MAX_VALUE","mutate","mutator","orderBy","containsKey","where","missingKey","concat","c","internalQuickSort","left","right","pivot","Math","floor","p","swap","quicksort3","indexForLessThan","indexForGreaterThan","indexForIterator","cmp","remove","splice","removeAll","removalCount","select","shuffle","random","skip","index","subsetSum","selection","indexA","indexB","take","takeWhile","zip","arr1","extendTo","enumerable","writable","usePrototype","classes","AssertionError","message","captureStackTrace","configurable","condition","functionString","functionBody","substring","trim","argsNotNull","isBoolean","isDate","isReference","isString","isType","type","isValue","Asserter","newAsserter","get","writeable","isGeneratorFunction","isGenerator","isIterable","iterator","symbols","isNaN","generator","generatorFunction","baseType","targetType","convert","toType","toBoolean","toDate","toNumber","toLowerCase","parse","Converter","newConverter","Events","_eventList","emit","eventName","events","ev","clear","eventFunc","eventList","currentEvent","deregister","eventsObj","curry","curried","sourceArgsLength","sourceArgs","_defineProperty","propertyDefinition","func2","unshift","getArgumentNames","split","map","arr","replace","getBody","Function","_regexPlus","getParameters","params","href","location","indexOfQueries","queries","query","decodeURIComponent","getLocale","parameters","locale","navigator","language","userLanguage","locationObj","data","expectedMethods","verifyLoggerInterface","logger","bindLoggers","loggerToBind","newLogInterface","log","bind","debug","info","warn","LogInterface","enableDebugLogging","_internalLogInterface","setDebugLogging","useDebugLogging","str","setLogger","newLogger","newLog","numbers","factors","small","large","sqrt","reverse","round","roundBy","direction","roundDown","roundUp","ceil","objects","obj2","_isEmpty","StopwatchWrapper","taskDescription","sw","Stopwatch","taskDesc","stop","duration","start","_startTime","_stopTime","_running","reset","StopwatchStack","_stopwatchStack","_push","_pop","swObj"],"mappings":"CAMA,SAAAA,GACA,YASA,SAAAC,MAGA,GAAAC,GAAA,GAAAD,GASAE,EAAA,WACA,QAAAA,GAAAC,GACAC,KAAAC,UACAD,KAAAE,UACAF,KAAAG,MAAA,EACAH,KAAAD,cAAAA,EAYA,MAVAD,GAAAM,UAAAC,KAAA,SAAAC,EAAAC,GACAP,KAAAC,OAAAI,KAAAC,GACAN,KAAAE,OAAAG,KAAAE,GACAP,KAAAG,SAEAL,EAAAM,UAAAI,IAAA,WACAR,KAAAC,OAAAO,MACAR,KAAAE,OAAAM,MACAR,KAAAG,SAEAL,IASAD,GAAAY,QAAA,SAAAC,GACA,GAAAC,SAAAD,EACA,IAAA,WAAAC,EACA,MAAAA,EACA,IAAA,OAAAD,EACA,MAAA,MACA,QAAAA,EAAAE,aACA,IAAAC,OAAA,MAAA,OACA,KAAAC,QAAA,MAAA,QACA,KAAAC,QAAA,MAAA,QACA,KAAAC,SAAA,MAAA,SACA,KAAAC,QAAA,MAAA,QACA,KAAAC,MAAA,MAAA,OAEA,MAAA,UASArB,EAAAsB,SAAA,WAEA,IAAA,GADAC,GAAAP,MAAAT,UAAAiB,MAAAC,KAAAC,WACAC,EAAA,EAAAA,EAAAJ,EAAAK,OAAAD,IACA,GAAA3B,EAAA6B,MAAAC,OAAAP,EAAAI,IACA,MAAAJ,GAAAI,EAGA,OAAA,OAUA3B,EAAA+B,SAAA,SAAAC,GAIA,QAAAC,GAAAC,EAAAC,GAEA,MADAC,GAAAC,EAAAjC,OAAAkC,QAAAJ,GACA,KAAAE,GACAC,EAAA7B,KAAA0B,EAAAC,GACAnC,EAAAuC,QAAAL,EAAA,SAAArB,EAAA2B,GACAL,EAAAK,GAAAC,EAAA5B,KAEAwB,EAAA1B,MACAwB,GAKAE,EAAAhC,OAAA+B,GAIA,QAAAM,GAAAC,GAWA,GAAAC,GAAA,WAAA,MAAAD,GAAAE,MAAAF,EAAAjB,WAKA,OAJA1B,GAAAuC,QAAAI,EAAA,SAAAlC,EAAA+B,GACAI,EAAAJ,GAAAC,EAAAhC,KAGAwB,EAAAU,EAAAC,GAKA,QAAAH,GAAAE,GACA,GAAAN,EAAA/B,MAAA+B,EAAAnC,cAAA,KAAA,IAAA4C,OAAA,yBAAAT,EAAAU,cAAA,IACA,QAAA/C,EAAAY,QAAA+B,IACA,IAAA3C,GAAAgD,MAAAC,OACA,MAAAhB,GAAAU,EAAAO,OAAAC,OAAAD,OAAAE,eAAAT,IACA,KAAA3C,GAAAgD,MAAAK,MACA,MAAApB,GAAAU,KACA,KAAA3C,GAAAgD,MAAAM,OACA,MAAArB,GAAAU,EAAA,GAAAvB,QAAAuB,GACA,KAAA3C,GAAAgD,MAAAO,KACA,MAAAtB,GAAAU,EAAA,GAAAtB,MAAAsB,EAAAa,YACA,KAAAxD,GAAAgD,MAAAhD,YACA,MAAA0C,GAAAC,EACA,SACA,MAAAA,IAvDA,GAAAP,GAAA,GACAC,EAAA,GAAApC,GAAA,IAyDA,OAAAwC,GAAAT,IAYAhC,EAAAyD,eAAA,SAAAC,EAAAC,EAAAC,GACA,MAAAF,EAAAC,GACAT,OAAAO,eAAAC,EAAAC,EAAAC,GAGAC,QAAAC,MACA,qBACAH,EACA,sDACAD,IAaA1D,EAAA+D,OAAA,SAAAtD,EAAAC,GAGA,QAAAsD,GAAAvD,EAAAC,GAEA,GAAAD,IAAAC,EACA,OAAA,CAEA,IAAAuD,GAAAf,OAAAgB,KAAAzD,GACA0D,EAAAjB,OAAAgB,KAAAxD,EAGA,IAFAuD,EAAAG,YACAD,EAAAC,aACAC,EAAAJ,EAAAE,GACA,OAAA,CAEA9B,GAAA7B,KAAAC,EAAAC,EACA,KAAA,GAAA4D,KAAA7D,GACA,IAAA4D,EAAA5D,EAAA6D,GAAA5D,EAAA4D,IACA,OAAA,CAIA,OADAjC,GAAA1B,OACA,EAGA,QAAA0D,GAAA5D,EAAAC,GACA,GAAA2B,EAAA/B,MAAA+B,EAAAnC,cAAA,KAAA,IAAA4C,OAAA,yBAAAT,EAAAnC,cAAA,IAEA,IAAAO,IAAAC,EACA,OAAA,CAGA,IAAA6D,GAAAvE,EAAAY,QAAAH,GACA+D,EAAAxE,EAAAY,QAAAF,EACA,IAAA6D,IAAAC,EACA,OAAA,CAGA,IAAAC,GAAApC,EAAAjC,OAAAsE,YAAAjE,GACAkE,EAAAtC,EAAAhC,OAAAqE,YAAAhE,EACA,IAAA,KAAA+D,GACA,KAAAE,EAGA,OAAA,CAOA,QAAAJ,GACA,IAAAvE,GAAAgD,MAAAO,KACA,GAAA9C,EAAAmE,YAAAlE,EAAAkE,UACA,OAAA,CAGA,KAAAZ,EAAAvD,EAAAC,GACA,OAAA,CAEA,MACA,KAAAV,GAAAgD,MAAAhD,YASA,IAAAgE,EAAAvD,EAAAC,GAEA,OAAA,CAEA,MACA,KAAAV,GAAAgD,MAAAK,MACA,GAAA5C,EAAAmB,SAAAlB,EAAAkB,OACA,OAAA,CAEAS,GAAA7B,KAAAC,EAAAC,EACA,KAAA,GAAAiB,GAAA,EAAAA,EAAAlB,EAAAmB,OAAAD,IACA,IAAA0C,EAAA5D,EAAAkB,GAAAjB,EAAAiB,IACA,OAAA,CAGAU,GAAA1B,KACA,MACA,KAAAX,GAAAgD,MAAAC,OACA,IAAAjD,GAAAgD,MAAAM,OACA,IAAAU,EAAAvD,EAAAC,GACA,OAAA,CAEA,MACA,SACA,GAAAD,IAAAC,EACA,OAAA,EAIA,OAAA,EAlGA,GAAA2B,GAAA,GAAApC,GAAA,IAoGA,OAAAoE,GAAA5D,EAAAC,GAYA,IAAAmE,GAAA,SAAAC,EAAAC,GAOA,MANA/E,GAAAuC,QAAAwC,EAAA,SAAAC,EAAAxC,GACAxC,EAAA6B,MAAAC,OAAAgD,EAAAtC,IAEAxC,EAAA6B,MAAAoD,YAAAH,EAAAtC,GAAAuC,EAAAvC,KACAqC,EAAAC,EAAAtC,GAAAuC,EAAAvC,IAFAsC,EAAAtC,GAAAuC,EAAAvC,KAIAsC,EAYA9E,GAAAkF,OAAA,SAAAJ,GAKA,MAJA9D,OAAAT,UAAAiB,MAAAC,KAAAC,UAAA,GAAAa,QAAA,SAAAwC,GACA/E,EAAA6B,MAAAoD,YAAAH,EAAAC,IACAF,EAAAC,EAAAC,KAEAD,GAaA9E,EAAAuC,QAAA,SAAA4C,EAAAC,EAAAC,GACA,GAAAC,GAAAtF,EAAAY,QAAAuE,EACA,QAAAG,GACA,IAAAtF,GAAAgD,MAAAO,KACA,IAAAvD,GAAAgD,MAAAhD,YACA,IAAAA,GAAAgD,MAAAC,OACA,IAAAjD,GAAAgD,MAAAM,OACA,IAAA,GAAAd,KAAA2C,GACAA,EAAAI,eAAA/C,IACA4C,EAAA3D,KAAA4D,EAAAF,EAAA3C,GAAAA,EAAA2C,EAGA,MACA,KAAAnF,GAAAgD,MAAAtB,UACA,IAAA1B,GAAAgD,MAAAK,MACA,IAAA,GAAA1B,GAAA,EAAAA,EAAAwD,EAAAvD,OAAAD,IACAyD,EAAA3D,KAAA4D,EAAAF,EAAAxD,GAAAA,EAAAwD,GAIA,MAAAA,GAYA,IAAAK,GAAA,SAAAV,EAAAC,GAOA,MANA/E,GAAAuC,QAAAwC,EAAA,SAAAC,EAAAxC,GACAxC,EAAA6B,MAAAoD,YAAAH,EAAAtC,GAAAuC,EAAAvC,IACAgD,EAAAV,EAAAtC,GAAAuC,EAAAvC,IAEAsC,EAAAtC,GAAAxC,EAAA+B,SAAAgD,EAAAvC,MAEAsC,EAuGA,OA3FA9E,GAAAyF,MAAA,SAAAX,GAKA,MAJA9D,OAAAT,UAAAiB,MAAAC,KAAAC,UAAA,GAAAa,QAAA,SAAAwC,GACA/E,EAAA6B,MAAAoD,YAAAH,EAAAC,IACAS,EAAAV,EAAAC,KAEAD,GAgBA9E,EAAA0F,OAAA,SAAAC,GACA,MAAA,OAAAA,EACA3F,EAAA4F,UAAAC,SAEA7F,EAAAY,QAAA+E,KAAA3F,EAAAgD,MAAAhD,YACA2F,EAEA3F,EAAAY,QAAA+E,KAAA3F,EAAAgD,MAAA8C,QACA9F,EAAA+D,OAAA4B,EAAA,IACA3F,EAAA4F,UAAAC,SAWA,SAAApF,GAAA,MAAAT,GAAA+D,OAAA4B,EAAAlF,KAYAT,EAAA+F,MAAA,SAAAC,GACAA,EAAAA,MACAhG,EAAA+F,MAAAE,YACAjG,EAAA+F,MAAAE,WAAAD,EAAAE,oBACAlG,EAAA+F,MAAAI,eACAnG,EAAA+F,MAAAI,cAAAH,EAAAI,uBACApG,EAAA+F,MAAAM,aACArG,EAAA+F,MAAAM,YAAAL,EAAAM,qBACAtG,EAAA+F,MAAAQ,aACAvG,EAAA+F,MAAAQ,YAAAP,EAAAQ,qBACAxG,EAAA+F,MAAAU,YACAzG,EAAA+F,MAAAU,WAAAT,EAAAU,gBAMA1G,EAAA4F,WACAC,SAAA,SAAApF,GAAA,MAAAA,IACAkG,OAAA,WAAA,OAAA,GACAC,QAAA,WAAA,OAAA,GACAC,MAAA,aACAC,QAAA,8DAEA9G,EAAAgD,OACAtB,UAAA1B,EAAAY,QAAAc,WACA2B,MAAArD,EAAAY,YACAmG,UAAA/G,EAAAY,SAAA,GACA2C,KAAAvD,EAAAY,QAAA,GAAAS,OACA2F,WAAAhH,EAAAY,QAAA,cACAqG,OAAAjH,EAAAY,QAAA,MACAsG,OAAAlH,EAAAY,QAAA,GACAqC,OAAAjD,EAAAY,YACAkF,OAAA9F,EAAAY,QAAA,IACA0C,OAAAtD,EAAAY,QAAA,GAAAQ,SACAtB,UAAAE,EAAAY,QAAAd,IAGA,WACA,GAAAqH,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAiBA,OAfA,mBAAAmH,SAAA,mBAAAA,QAAAC,KACAJ,EAAAnH,EAAAA,EACAsH,OAAA,WACA,MAAAtH,MAGA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAzH,GAKAmH,EAAAnH,EAAAA,EAEAA,QChfA,WACA,YACA,SAAA0H,GAAA1H,GA2rBA,QAAA2H,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAAG,IAAAJ,EACA,IAAAG,IAAAJ,EAEA,WADAG,GAAAxH,KAAAuH,EAGA,MAAAE,EAAAJ,GAAA,CAGA,IAAA,GAAAlG,GAAA,EAAAA,EAAAiG,EAAAhG,OAAAD,IAAA,CAGA,IAAA,GAFAwG,MACAC,EAAAR,EAAAjG,GACA0G,EAAA1G,EAAA,EAAA0G,EAAAT,EAAAhG,OAAAyG,IACAF,EAAA3H,KAAAoH,EAAAS,GAEA,IAAAC,GAAAP,EAAAhG,UACAuG,GAAA9H,KAAA4H,GACAT,EAAAQ,EAAAN,EAAAC,EAAAQ,EAAAN,GAEA,MAAAA,IA5sBA,GAAAO,GAAAvI,EAAAuI,SAeAA,GAAAC,UAAA,WACA,GAAAC,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAC,EAAAhH,UAAA+G,KACAE,EAAAjH,UAAA+G,IACAzI,GAAA4I,OAAAC,gBAAAlG,EACA,IAAAmG,EACAJ,GAAA1I,EAAA0F,OAAAgD,GAEAI,EADA,MAAAH,EACAhG,EAAA,GAGA+F,EAAAC,EAAAhG,EAAA,GAEA,KAAA,GAAAhB,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAmH,EAAAJ,EAAAI,EAAAnG,EAAAhB,GAEA,OAAAmH,IAYAP,EAAAQ,IAAA,WACA,GAAAN,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IACA,IAAA,MAAAO,EACA,MAAArG,GAAAf,OAAA,CAEAoH,GAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA,GAAAqH,EAAArG,EAAAhB,IACA,OAAA,CAGA,QAAA,GAUA4G,EAAAU,QAAA,WACA,GAAAR,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,IACA,OAAAF,GAAAL,IAAAvF,EAAAmF,GAAAnF,EAAAf,QAWA2G,EAAAW,SAAA,WACA,GAIAC,GACAxH,EALA8G,EAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAtD,EAAAzD,UAAA+G,KACAX,EAAApG,UAAA+G,IAQA,IAJAU,EADAnJ,EAAA6B,MAAAuH,WAAAjE,GACA,SAAA1E,GAAA,MAAA0E,GAAA1E,IAEA,SAAAA,EAAAC,GAAA,MAAAV,GAAA+D,OAAAtD,EAAAC,IAEA,MAAAoH,GACA,IAAAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA,GAAAwH,EAAAxG,EAAAhB,GAAAwD,GACA,OAAA,MAMA,KADA2C,EAAA9H,EAAA0F,OAAAoC,GACAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA,GAAAwH,EAAArB,EAAAnF,EAAAhB,IAAAwD,GACA,OAAA,CAIA,QAAA,GAWAoD,EAAAjI,MAAA,WACA,GAKA6I,GACAxH,EANA8G,EAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAtD,EAAAzD,UAAA+G,KACAX,EAAApG,UAAA+G,KACAnI,EAAA,CAQA,IAJA6I,EADAnJ,EAAA6B,MAAAuH,WAAAjE,GACA,SAAA1E,GAAA,MAAA0E,GAAA1E,IAEA,SAAAA,EAAAC,GAAA,MAAAV,GAAA+D,OAAAtD,EAAAC,IAEA,MAAAoH,EACA,IAAAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAwH,EAAAxG,EAAAhB,GAAAwD,IACA7E,QAMA,KADAwH,EAAA9H,EAAA0F,OAAAoC,GACAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAwH,EAAArB,EAAAnF,EAAAhB,IAAAwD,IACA7E,GAIA,OAAAA,GAWA,IAAAmC,GAAA,WACA,MAAAzC,GAAA+B,SAAA5B,MAYAoI,GAAAc,SAAA,WACA,GAIA1H,GAJA8G,EAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,KACAK,IAEA,IAAA,MAAAhB,EACA,IAAAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAmH,EAAAI,SAAAvG,EAAAhB,KACAmH,EAAAtI,KAAAmC,EAAAhB,QAMA,KADAmG,EAAA9H,EAAA0F,OAAAoC,GACAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAmH,EAAAI,SAAApB,EAAAnF,EAAAhB,IAAAmG,IACAgB,EAAAtI,KAAAmC,EAAAhB,GAIA,OAAAmH,GAYA,IAAAzE,GAAA,SAAAiF,GACA,MAAAtJ,GAAA+D,OAAA5D,KAAAmJ,GAWAf,GAAAgB,MAAA,WACA,GAAAd,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IACA,IAAA,MAAAO,GACA,GAAArG,EAAAf,OAAA,EACA,MAAAe,GAAA,OAGA,CACAqG,EAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA,GAAAqH,EAAArG,EAAAhB,IACA,MAAAgB,GAAAhB,GAIA,MAAA,MAGA,IAAA6H,GAAA,SAAAC,EAAAC,GACA,IAAA,GAAA/H,GAAA,EAAAA,EAAA8H,EAAA7H,OAAAD,IAAA,CACA,GAAAgI,GAAAF,EAAA9H,EACA3B,GAAA6B,MAAA+H,QAAAD,GAGAH,EAAAG,EAAAD,GAFAA,EAAAlJ,KAAAmJ,GAIA,MAAAD,GAGAnB,GAAAsB,QAAA,WACA,GAAApB,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,IACA,OAAAe,GAAA7G,OAUA4F,EAAAuB,UAAA,WACA,GAAArB,GAAA,EACAsB,EAAA/J,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAuB,EAAAtI,UAAA+G,IAEA,QAOAwB,GAAA,SAAAjB,GACA,GAAAnB,KACAmB,GAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAA,EAAAA,EAAAoI,EAAAnI,OAAAD,IAAA,CACA3B,EAAA6B,MAAAqI,SAAAH,EAAApI,GACA,KAAA,GAAA2C,GAAA,EAAAA,EAAA0F,EAAApI,OAAA0C,IACAtE,EAAA6B,MAAAqI,SAAAF,EAAA1F,IACA0E,EAAAe,EAAApI,GAAAqI,EAAA1F,KACAuD,EAAArH,KAAAR,EAAAyF,SAAAsE,EAAApI,GAAAqI,EAAA1F,KAIA,MAAAuD,MAWAU,EAAA4B,QAAA,WACA,GAAA1B,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,IACA,IAAA9F,EAAAf,OAAA,EACA,OAAA,CAEA,KAAA,GAAAD,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA,GAAA3B,EAAA6B,MAAAC,OAAAa,EAAAhB,IACA,OAAA,CAGA,QAAA,GASA4G,EAAA6B,OAAA,WACA,GAAA3B,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,IACA,IAAA9F,EAAAf,OAAA,EACA,OAAA,CAEA,KAAA,GAAAD,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA,IAAA3B,EAAA6B,MAAAC,OAAAa,EAAAhB,IACA,OAAA,CAGA,QAAA,GAWA4G,EAAA8B,KAAA,WACA,GAAA5B,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IACA,IAAA,MAAAO,GACA,GAAArG,EAAAf,OAAA,EACA,MAAAe,GAAAA,EAAAf,OAAA,OAGA,CACAoH,EAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAAgB,EAAAf,OAAA,EAAAD,GAAA,EAAAA,IACA,GAAAqH,EAAArG,EAAAhB,IACA,MAAAgB,GAAAhB,GAIA,MAAA,OAWA4G,EAAA+B,IAAA,WACA,GAIAC,GACA5I,EALA8G,EAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,KACA+B,EAAAtJ,OAAAuJ,SAGA,IAAA,MAAA3C,EAEA,IADAA,EAAA9H,EAAA0F,OAAAoC,GACAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA4I,EAAAzC,EAAAnF,EAAAhB,IACA3B,EAAA6B,MAAA6I,SAAAH,IAAAA,EAAAC,IACAA,EAAAD,OAKA,KAAA5I,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA4I,EAAA5H,EAAAhB,GACA3B,EAAA6B,MAAA6I,SAAAH,IAAAA,EAAAC,IACAA,EAAAD,EAIA,OAAAC,IAWAjC,EAAAoC,IAAA,WACA,GAIAJ,GACA5I,EALA8G,EAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,KACAmC,EAAA1J,OAAA2J,SAGA,IAAA,MAAA/C,EAEA,IADAA,EAAA9H,EAAA0F,OAAAoC,GACAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA4I,EAAAzC,EAAAnF,EAAAhB,IACA3B,EAAA6B,MAAA6I,SAAAH,IAAAK,EAAAL,IACAK,EAAAL,OAKA,KAAA5I,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA4I,EAAA5H,EAAAhB,GACA3B,EAAA6B,MAAA6I,SAAAH,IAAAK,EAAAL,IACAK,EAAAL,EAIA,OAAAK,IAYArC,EAAAuC,OAAA,WACA,GAAArC,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAsC,EAAArJ,UAAA+G,IAOA,OANAsC,GAAA/K,EAAA0F,OAAAqF,GACA/K,EAAA6B,MAAAuH,WAAA2B,IACA/K,EAAAuC,QAAAI,EAAA,SAAAqC,EAAAxC,GACAG,EAAAH,GAAAuI,EAAApI,EAAAH,MAGAG,GAUA4F,EAAAyC,QAAA,WACA,GAAAvC,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,KACAO,EAAAtH,UAAA+G,IACAX,GAAA9H,EAAA0F,OAAAoC,GACAkB,EAAAA,GAAA,SAAAvI,EAAAC,GACA,MAAAoH,GAAArH,GAAAqH,EAAApH,GAAA,EAAAoH,EAAArH,GAAAqH,EAAApH,GAAA,GAAA,EAEA,IAAAuK,GAAAtI,EAAAuI,MAAA,SAAAxH,GAAA,MAAA,OAAAoE,EAAApE,KACAyH,EAAAxI,EAAAuI,MAAA,SAAAxH,GAAA,MAAA,OAAAoE,EAAApE,IAEA,OADAuH,GAAA7G,UAAA4E,GACAiC,EAAAG,OAAAD,IASA5C,EAAAnE,UAAA,WACA,GAAAqE,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IAEAO,GADAhJ,EAAAY,QAAAoI,KAAAhJ,EAAAgD,MAAA8C,OACA9F,EAAA0F,OAAAsD,GAIAA,GAAA,SAAAvI,EAAAC,GACA,MAAAD,GAAAC,EAAA,EAAAA,EAAAD,EAAA,GAAA,EAIA,IAAA0I,GAAA,SAAA1I,EAAAC,EAAA+D,EAAAE,GACA,GAAA0G,GAAArC,EAAAvI,EAAAC,EACA,OAAA,KAAA2K,EACA5G,EAAAE,EACA0G,GAKAC,EAAA,SAAAC,EAAAC,GACA,EAAA,CACA,GAAA7J,GAAA4J,EACAlD,EAAAmD,EACAC,EAAAC,KAAAC,OAAAJ,EAAAC,GAAA,GACAI,EAAAjJ,EAAA8I,EACA,GAAA,CACA,KAAA9J,EAAAgB,EAAAf,QAAAuH,EAAAxG,EAAAhB,GAAAiK,EAAAjK,EAAA8J,GAAA,GACA9J,GAEA,MAAA0G,GAAA,GAAAc,EAAAyC,EAAAjJ,EAAA0F,GAAAoD,EAAApD,GAAA,GACAA,GAEA,IAAA1G,EAAA0G,EACA,KAEAA,GAAA1G,GACAgB,EAAAkJ,KAAAlK,EAAA0G,GAEA1G,IACA0G,UACAA,GAAA1G,EACA6J,GAAA7J,GAAA0G,EAAAkD,GACAlD,EAAAkD,GACAD,EAAAC,EAAAlD,GAEAkD,EAAA5J,IAGA6J,EAAA7J,GACA2J,EAAA3J,EAAA6J,GAEAA,EAAAnD,SAEAmD,EAAAD,GAEAD,GAAA,EAAAnL,KAAAyB,OAAA,IAUA2G,EAAAuD,WAAA,WACA,GAAArD,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IAEAO,GADAhJ,EAAAY,QAAAoI,KAAAhJ,EAAAgD,MAAA8C,OACA9F,EAAA0F,OAAAsD,GAIAA,GAAA,SAAAvI,EAAAC,GACA,MAAAD,GAAAC,EAAA,EAAAA,EAAAD,EAAA,GAAA,EAGA,IAAA6K,GAAA,SAAAC,EAAAC,GAKA,IAJA,GAAAO,GAAAR,EACAS,EAAAR,EACAC,EAAA9I,EAAA4I,GACAU,EAAAV,EAAA,EACAS,GAAAC,GAAA,CACA,GAAAC,GAAAlD,EAAArG,EAAAsJ,GAAAR,EACA,GAAAS,EACAvJ,EAAAkJ,KAAAE,IAAAE,KAEAC,EAAA,EACAvJ,EAAAkJ,KAAAI,EAAAD,KAGAC,IAGAF,EAAA,EAAAR,GACAD,EAAAC,EAAAQ,EAAA,GAEAP,EAAAQ,EAAA,GACAV,EAAAU,EAAA,EAAAR,GAGAF,GAAA,EAAAnL,KAAAyB,OAAA,IAUA2G,EAAA4D,OAAA,WACA,GAAA1D,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IACAO,GAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAqH,EAAArG,EAAAhB,KACAgB,EAAAyJ,OAAAzK,EAAA,EAGA,OAAAgB,IAWA4F,EAAA8D,UAAA,WACA,GAAA5D,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,KACA6D,EAAA,CACAtD,GAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAAgB,EAAAf,OAAA,EAAAD,EAAA,GAAAA,IACAqH,EAAArG,EAAAhB,MACAgB,EAAAyJ,OAAAzK,EAAA,GACA2K,IAGA,OAAAA,IAUA/D,EAAAgE,OAAA,WACA,GAAA9D,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,KACAK,IACAhB,GAAA9H,EAAA0F,OAAAoC,EACA,KAAA,GAAAnG,GAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAmH,EAAAtI,KAAAsH,EAAAnF,EAAAhB,IAEA,OAAAmH,IAUAP,EAAAiE,QAAA,WAGA,IAAA,GAFA/D,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACA9G,EAAAgB,EAAAf,OAAA,EAAAD,GAAA,EAAAA,IACA4G,EAAAsD,KAAAlJ,EAAAhB,EAAA+J,KAAAC,MAAAD,KAAAe,SAAA9K,GAEA,OAAAgB,IAWA4F,EAAAmE,KAAA,WACA,GAAAjE,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAkE,EAAAjL,UAAA+G,KACAK,IACA,GAAA6D,IACAA,EAAA,EAEA,KAAA,GAAAhL,GAAA,EAAAA,EAAAgB,EAAAf,OAAA+K,GAAAA,GAAAhK,EAAAf,OAAAD,IACAmH,EAAAnH,GAAAgB,EAAAhB,EAAAgL,EAEA,OAAA7D,IA2CAP,EAAAqE,UAAA,WACA,GAAAnE,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAZ,EAAAnG,UAAA+G,KACAX,EAAApG,UAAA+G,IAKA,OAJAzI,GAAA6B,MAAAuH,WAAAtB,KACAA,EAAA9H,EAAA4F,UAAAC,UAGA8B,EAAAhF,EAAAkF,EAAAC,UAWAS,EAAAL,IAAA,WACA,GAIAvG,GAJA8G,EAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAX,EAAApG,UAAA+G,KACAP,EAAA,CAEA,IAAA,MAAAJ,EAEA,IADAA,EAAA9H,EAAA0F,OAAAoC,GACAnG,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IAAA,CACA,GAAAkL,GAAA/E,EAAAnF,EAAAhB,GACA3B,GAAA6B,MAAA6I,SAAAmC,KACA3E,GAAA2E,OAKA,KAAAlL,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACA3B,EAAA6B,MAAA6I,SAAA/H,EAAAhB,MACAuG,GAAAvF,EAAAhB,GAIA,OAAAuG,IAYAK,EAAAsD,KAAA,WACA,GAAApD,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAqE,EAAApL,UAAA+G,KACAsE,EAAArL,UAAA+G,KACA7F,EAAAD,EAAAmK,EACAnK,GAAAmK,GAAAnK,EAAAoK,GACApK,EAAAoK,GAAAnK,GAWA2F,EAAAyE,KAAA,WACA,GAAAvE,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAnI,EAAAoB,UAAA+G,KACAK,IACA,GAAAxI,IACAA,EAAA,EAEA,KAAA,GAAAqB,GAAA,EAAArB,EAAAqB,GAAAA,EAAAgB,EAAAf,OAAAD,IACAmH,EAAAnH,GAAAgB,EAAAhB,EAEA,OAAAmH,IAWAP,EAAA0E,UAAA,WACA,GAAAxE,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,KACAK,IACAE,GAAAhJ,EAAA0F,OAAAsD,EACA,KAAA,GAAArH,GAAA,EAAAA,EAAArB,OACA0I,EAAArG,EAAAhB,IADAA,IAEAmH,EAAAtI,KAAAmC,EAAAhB,GAEA,OAAAmH,IAaAP,EAAA2C,MAAA,WACA,GAAAzC,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAO,EAAAtH,UAAA+G,IACAO,GAAAhJ,EAAA0F,OAAAsD,EAEA,KAAA,GADAF,MACAnH,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAqH,EAAArG,EAAAhB,GAAAA,EAAAgB,IACAmG,EAAAtI,KAAAmC,EAAAhB,GAGA,OAAAmH,IAYAP,EAAA2E,IAAA,WACA,GAAAzE,GAAA,EACA0E,EAAAnN,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAK,MAAAlD,KAAAuB,UAAA+G,KACAa,EAAA5H,UAAA+G,KACArD,EAAA1D,UAAA+G,IACArD,GAAApF,EAAA0F,OAAAN,EAGA,KAAA,GAFAzC,GAAAxC,KACA2I,KACAnH,EAAA,EAAAA,EAAAgB,EAAAf,OAAAD,IACAmH,EAAAtI,KAAA4E,EAAA+H,EAAAxL,GAAA2H,EAAA3H,IAEA,OAAAmH,IASAP,EAAA6E,SAAA,SAAA1J,GACA1D,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAC,YACAxI,EAAAyD,eAAAC,EAAA,OAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAQ,MACA/I,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAU,UACAjJ,EAAAyD,eAAAC,EAAA,YAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAW,WACAlJ,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAjI,QACAN,EAAAyD,eAAAC,EAAA,YAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA4B,IACAzC,EAAAyD,eAAAC,EAAA,YAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAc,WACArJ,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAwD,IACArE,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAgB,QACAvJ,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAsB,UACA7J,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAuB,YACA9J,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA4B,UACAnK,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA6B,SACApK,EAAAyD,eAAAC,EAAA,QAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA8B,OACArK,EAAAyD,eAAAC,EAAA,OAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA+B,MACAtK,EAAAyD,eAAAC,EAAA,OAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAoC,MACA3K,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAuC,SACA9K,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAyC,UACAhL,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAnE,YACApE,EAAAyD,eAAAC,EAAA,cAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAuD,aACA9L,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA4D,SACAnM,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA8D,YACArM,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAgE,SACAvM,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAiE,UACAxM,EAAAyD,eAAAC,EAAA,QAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAmE,OACA1M,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAqE,YACA5M,EAAAyD,eAAAC,EAAA,OAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAL,MACAlI,EAAAyD,eAAAC,EAAA,QAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAsD,OACA7L,EAAAyD,eAAAC,EAAA,QAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAAyE,OACAhN,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA0E,YACAjN,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA2C,QACAlL,EAAAyD,eAAAC,EAAA,OAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA0H,EAAA2E,OAUAlN,EAAA+F,MAAAE,WAAA,SAAAsH,GACAA,GACAhF,EAAA6E,SAAApM,MAAAT,YAOA,GAAA4G,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCj8BA,SAAAF,GACA,YACA,SAAA4H,GAAA1H,GAEAA,EAAAwN,QAAAxN,EAAAwN,WAMA,IAAAC,GAAA,SAAAC,GACA,OAAAvN,eAAAsN,GACA,GAAAA,GAAAC,IACA5K,OAAAA,MAAA6K,mBACA7K,MAAA6K,kBAAAxN,KAAAA,KAAAY,aACAZ,KAAAwD,KAAA,sBACAxD,KAAAuN,QAAAA,GAAA,2BAEAD,GAAAlN,UAAA2C,OAAAC,OAAAL,MAAAvC,WACAQ,aACAF,MAAA4M,EACAJ,YAAA,EACAC,UAAA,EACAM,cAAA,IAYA,IAAAhF,GAAA,SAAAiF,EAAAH,GAEA,GAAA1N,EAAAY,QAAAiN,KAAA7N,EAAAgD,MAAAhD,aACA,IAAA6N,IAAA,CACA,GAAAH,EAAA,KAAA,IAAA5K,OAAA4K,EAEA,IAAAI,GAAAD,EAAArK,WACAuK,EAAAD,EAAAE,UAAAF,EAAAxL,QAAA,KAAA,EAAAwL,EAAApJ,YAAA,MAAAuJ,MACA,MAAA,IAAAR,GAAA,qBAAAM,QAKA,KAAAF,EACA,KAAA,IAAAJ,GAAAC,EAAAA,EACA,qBAAAzM,OAAA4M,KAWAK,EAAA,WACAtF,EAAA,WAAA,MAAA5I,GAAA6B,MAAAqM,YAAArL,MAAA1C,KAAAuB,cAUAI,EAAA,SAAAjB,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAC,OAAAjB,MAUA+I,EAAA,SAAA/I,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAA+H,QAAA/I,MAUAsN,EAAA,SAAAtN,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAsM,UAAAtN,MAUAuN,EAAA,SAAAvN,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAuM,OAAAvN,MAUAuI,EAAA,SAAAvI,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAuH,WAAAvI,MAUAgI,EAAA,SAAAhI,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAgH,gBAAAhI,MAUA6J,EAAA,SAAA7J,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAA6I,SAAA7J,MAUAqJ,EAAA,SAAArJ,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAqI,SAAArJ,MAUAwN,EAAA,SAAAxN,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAwM,YAAAxN,MAWAoE,EAAA,WACA,GAAA1D,GAAAG,SACAkH,GAAA,WAAA,MAAA5I,GAAA6B,MAAAoD,YAAApC,MAAA/C,EAAAyB,MAUA+M,EAAA,SAAAzN,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAAyM,SAAAzN,MAWA0N,EAAA,SAAA1N,EAAA2N,GACA5F,EAAA,WAAA,MAAA5I,GAAA6B,MAAA0M,OAAA1N,EAAA2N,MAUAC,EAAA,SAAA5N,GACA+H,EAAA,WAAA,MAAA5I,GAAA6B,MAAA4M,QAAA5N,MASA6N,EAAA,WASA,QAAAA,KASA,MAAA,UAAAC,GAwBA,MAdA3O,GAAAyD,eAAAkL,EAAA,eAAAC,IAAA,WAAA,MAAAV,IAAAW,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,UAAAC,IAAA,WAAA,MAAA9M,IAAA+M,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,WAAAC,IAAA,WAAA,MAAAhF,IAAAiF,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,aAAAC,IAAA,WAAA,MAAAT,IAAAU,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,UAAAC,IAAA,WAAA,MAAAR,IAAAS,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,cAAAC,IAAA,WAAA,MAAAxF,IAAAyF,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,mBAAAC,IAAA,WAAA,MAAA/F,IAAAgG,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,YAAAC,IAAA,WAAA,MAAAlE,IAAAmE,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,YAAAC,IAAA,WAAA,MAAA1E,IAAA2E,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,eAAAC,IAAA,WAAA,MAAAP,IAAAQ,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,eAAAC,IAAA,WAAA,MAAA3J,IAAA4J,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,YAAAC,IAAA,WAAA,MAAAN,IAAAO,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,UAAAC,IAAA,WAAA,MAAAL,IAAAM,WAAA,IACA7O,EAAAyD,eAAAkL,EAAA,WAAAC,IAAA,WAAA,MAAAH,IAAAI,WAAA,IACAF,GACA/F,GAGA,MAAA8F,KAIA1O,GAAAwN,QAAAkB,SAAAA,EACA1O,EAAA4I,OAAA,GAAA5I,GAAAwN,QAAAkB,SAMA,GAAAvH,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCrSA,WACA,YACA,SAAA0H,GAAA1H,GAOA,GAAA6B,GAAA,YAQAA,GAAAqM,YAAA,WACA,IAAA,GAAAvM,GAAA,EAAAA,EAAAD,UAAAE,OAAAD,IACA,GAAA,MAAAD,UAAAC,GACA,OAAA,CAGA,QAAA,GAUAE,EAAAC,OAAA,SAAAjB,GACA,MAAA,OAAAA,GASAgB,EAAA+H,QAAA,SAAA/I,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAAK,OASAxB,EAAAsM,UAAA,SAAAtN,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAAhD,YASA6B,EAAAuM,OAAA,SAAAvN,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAAO,MASA1B,EAAAuH,WAAA,SAAAvI,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAAhD,aASA6B,EAAAiN,oBAAA,SAAAjO,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAAhD,aAAAa,EAAAkO,eASAlN,EAAAmN,WAAA,SAAAnO,GACA,IAAAb,EAAA6B,MAAAC,OAAAjB,GAAA,OAAA,CACA,IAAAoO,GAAApO,EAAAb,EAAAkP,QAAAD,WAAApO,EAAAN,UAAAP,EAAAkP,QAAAD,SACA,OAAAjP,GAAAY,QAAAqO,KAAAjP,EAAAgD,MAAAhD,aASA6B,EAAAgH,gBAAA,SAAAhI,GACA,MAAAb,GAAA6B,MAAAC,OAAAjB,IAAAb,EAAAY,QAAAC,KAAAb,EAAAgD,MAAAK,OAAAxC,EAAAe,OAAA,GASAC,EAAA6I,SAAA,SAAA7J,GACA,OAAAsO,MAAAtO,IASAgB,EAAAqI,SAAA,SAAArJ,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAAC,QASApB,EAAAwM,YAAA,SAAAxN,GACA,OAAAb,EAAAY,QAAAC,IACA,IAAAb,GAAAgD,MAAAK,MACA,IAAArD,GAAAgD,MAAAO,KACA,IAAAvD,GAAAgD,MAAAhD,YACA,IAAAA,GAAAgD,MAAAoM,UACA,IAAApP,GAAAgD,MAAAqM,kBACA,IAAArP,GAAAgD,MAAAC,OACA,IAAAjD,GAAAgD,MAAAM,OACA,OAAA,CACA,SACA,OAAA,IAWAzB,EAAAoD,YAAA,WACA,GAAA1D,GAAAP,MAAAT,UAAAiB,MAAAC,KAAAC,UACA,IAAAH,EAAAK,OAAA,EACA,OAAA,CACA,IAAA0N,GAAAtP,EAAAY,QAAAW,EAAA,GACA,IAAA+N,IAAAtP,EAAAgD,MAAAK,OAAAiM,IAAAtP,EAAAgD,MAAAC,QAAAqM,IAAAtP,EAAAgD,MAAAhD,YACA,OAAA,CACAsP,KAAAtP,EAAAgD,MAAAhD,cACAsP,EAAAtP,EAAAgD,MAAAC,OACA,KAAA,GAAAtB,GAAA,EAAAA,EAAAJ,EAAAK,OAAAD,IAAA,CACA,GAAA4N,GAAAvP,EAAAY,QAAAW,EAAAI,GAGA,IAFA4N,IAAAvP,EAAAgD,MAAAhD,cACAuP,EAAAvP,EAAAgD,MAAAC,QACAsM,IAAAD,EACA,OAAA,EAEA,OAAA,GASAzN,EAAAyM,SAAA,SAAAzN,GACA,MAAAb,GAAAY,QAAAC,KAAAb,EAAAgD,MAAA8C,QAUAjE,EAAA0M,OAAA,SAAA1N,EAAA2N,GACA,MAAAxO,GAAAY,QAAAC,KAAA2N,GASA3M,EAAA4M,QAAA,SAAA5N,GACA,OAAAb,EAAAY,QAAAC,IACA,IAAAb,GAAAgD,MAAAhD,WACA,IAAAA,GAAAgD,MAAAhD,QACA,IAAAA,GAAAgD,MAAAkE,OACA,IAAAlH,GAAAgD,MAAA8C,OACA,IAAA9F,GAAAgD,MAAAlD,UACA,OAAA,CACA,SACA,OAAA,IAIAE,EAAA6B,MAAAA,EAMA,GAAAsF,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCjPA,SAAAF,GACA,YACA,SAAA4H,GAAA1H,GAEAA,EAAAwN,QAAAxN,EAAAwN,WAUA,IAAAgC,GAAA,SAAA7M,EAAA8M,GAEA,OADAzP,EAAA4I,OAAA0F,SAAAmB,GACAA,GACA,IAAAzP,GAAAgD,MAAAhD,WAAA,MAAA0P,GAAA/M,EACA,KAAA3C,GAAAgD,MAAAO,KAAA,MAAAoM,GAAAhN,EACA,KAAA3C,GAAAgD,MAAAkE,OAAA,MAAA0I,GAAAjN,KAUA+M,EAAA,SAAA/M,GACA,GAAA3C,EAAA6B,MAAAC,OAAAa,IAAA3C,EAAA6B,MAAAuH,WAAAzG,EAAA+M,WACA,MAAA/M,GAAA+M,WAEA,QAAA1P,EAAAY,QAAA+B,IACA,IAAA3C,GAAAgD,MAAAhD,WACA,MAAA2C,EACA,KAAA3C,GAAAgD,MAAA8C,OACA,OAAAnD,EAAAkN,cAAA5B,QACA,IAAA,QACA,IAAA,IACA,IAAA,GACA,IAAA,MACA,IAAAnO,GACA,OAAA,CACA,SACA,OAAA,EAEA,KACA,SACA,QAAA6C,IAUAgN,EAAA,SAAAhN,GACA,GAAA3C,EAAA6B,MAAAC,OAAAa,IAAA3C,EAAA6B,MAAAuH,WAAAzG,EAAAgN,QACA,MAAAhN,GAAAgN,QAEA,QAAA3P,EAAAY,QAAA+B,IACA,IAAA3C,GAAAgD,MAAAO,KACA,MAAAZ,EACA,KAAA3C,GAAAgD,MAAA8C,OACA,MAAA,IAAAzE,MAAAA,KAAAyO,MAAAnN,GACA,SACA,MAAA,IAAAtB,MAAAA,KAAAyO,MAAAnN,EAAAa,eAUAoM,EAAA,SAAAjN,GACA,GAAA3C,EAAA6B,MAAAC,OAAAa,IAAA3C,EAAA6B,MAAAuH,WAAAzG,EAAAiN,UACA,MAAAjN,GAAAiN,UAEA,QAAA5P,EAAAY,QAAA+B,IACA,IAAA3C,GAAAgD,MAAAkE,OACA,MAAAvE,EACA,SACA,OAAAA,IASAoN,EAAA,WASA,QAAAA,KASA,MAAA,UAAAC,GAaA,MAHAhQ,GAAAyD,eAAAuM,EAAA,aAAApB,IAAA,WAAA,MAAAc,IAAAb,WAAA,IACA7O,EAAAyD,eAAAuM,EAAA,UAAApB,IAAA,WAAA,MAAAe,IAAAd,WAAA,IACA7O,EAAAyD,eAAAuM,EAAA,YAAApB,IAAA,WAAA,MAAAgB,IAAAf,WAAA,IACAmB,GACAR,GAGA,MAAAO,KAIA/P,GAAAwN,QAAAuC,UAAAA,EACA/P,EAAAwP,QAAA,GAAAxP,GAAAwN,QAAAuC,UAMA,GAAA5I,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCjKA,WACA,YACA,SAAA0H,GAAA1H,GAEAA,EAAAwN,QAAAxN,EAAAwN,WAOA,IAAAyC,GAAA,WAOA,QAAAA,KAEA,GAAAC,MAUAC,EAAA,SAAAC,GACA,GAAAC,GAAAH,EAAAE,EACA,IAAApQ,EAAA6B,MAAAC,OAAAuO,GACA,IAAA,GAAA1O,GAAA,EAAAA,EAAA0O,EAAAzO,OAAAD,IAAA,CACA,GAAA2O,GAAAD,EAAA1O,EACA3B,GAAA6B,MAAAC,OAAAwO,EAAA5H,OACA4H,EAAA5H,KAAA7F,MAAA,KAAA7B,MAAAT,UAAAiB,MAAAC,KAAAC,UAAA,MAaA6O,EAAA,SAAAH,GACApQ,EAAA6B,MAAAC,OAAAsO,GACAF,EAAAE,GAAA,MAWAnG,EAAA,SAAAmG,EAAAI,GACAxQ,EAAA6B,MAAAC,OAAAsO,GACApQ,EAAA6B,MAAAuH,WAAAoH,EACA,IAAAC,GAAAP,EAAAE,KAAAF,EAAAE,OACAM,GACAhI,KAAA8H,EAEAC,GAAAjQ,KAAAkQ,EACA,IAAAC,GAAA,WACAT,EAAAE,GAAA/D,UAAA,SAAA5L,GAAA,MAAAA,KAAAiQ,IAEA,OAAAC,GAWA,OAAA,UAAAC,GAIA,MAHA5Q,GAAAyD,eAAAmN,EAAA,QAAAhC,IAAA,WAAA,MAAAuB,IAAAtB,WAAA,IACA7O,EAAAyD,eAAAmN,EAAA,SAAAhC,IAAA,WAAA,MAAA2B,IAAA1B,WAAA,IACA7O,EAAAyD,eAAAmN,EAAA,MAAAhC,IAAA,WAAA,MAAA3E,IAAA4E,WAAA,IACA+B,OAKA,MAAAX,KAIAjQ,GAAAwN,QAAAyC,OAAAA,EACAjQ,EAAAqQ,OAAA,GAAArQ,GAAAwN,QAAAyC,OAMA,GAAA9I,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MC3HA,WACA,YACA,SAAA0H,GAAA1H,GAEA,GAAA4F,GAAA5F,EAAA4F,UAAA5F,EAAA4F,aASAA,GAAAiL,MAAA,WAOA,QAAAC,GAAAvP,GACA,MAAAA,GAAAK,QAAAmP,EACApO,EAAAE,MAAA,KAAAtB,GAEA,WACA,MAAAuP,GAAAvP,EAAA6J,OAAApK,MAAAT,UAAAiB,MAAAC,KAAAC,cAXA,GAAA+G,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAhD,YAAAG,KAAAuB,UAAA+G,IACAzI,GAAA4I,OAAAQ,WAAAzG,EACA,IAAAqO,GAAAhQ,MAAAT,UAAAiB,MAAAC,KAAAC,WACAqP,EAAApO,EAAAf,MAUA,OAAAkP,GAAAE,GAUA,IAAAvO,GAAA,WACA,MAAAzC,GAAA+B,SAAA5B,OAYA8Q,EAAA,SAAAtN,EAAAuN,GACA,MAAAlR,GAAAyD,eAAAtD,KAAAwD,EAAAuN,IAWA7M,EAAA,SAAA8M,GACA,MAAAnR,GAAA+D,OAAA5D,KAAAgR,IAYAtM,EAAA,WACA,GAAAtD,GAAAP,MAAAT,UAAAiB,MAAAC,KAAAC,UAEA,OADAH,GAAA6P,QAAAjR,MACAH,EAAA4F,UAAAV,OAAArC,MAAA,KAAAtB,GAUAqE,GAAAV,OAAA,WACA,MAAAlF,GAAAkF,OAAArC,MAAA,KAAAnB,YASAkE,EAAAyL,iBAAA,WACA,GAAA5I,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAhD,YAAAG,KAAAuB,UAAA+G,IACAzI,GAAA4I,OAAAQ,WAAAzG,EACA,IAAAsF,GAAAtF,EAAAa,WACAjC,EAAA0G,EAAA+F,UAAA/F,EAAA3F,QAAA,KAAA,EAAA2F,EAAA3F,QAAA,MAAA2L,OAAAqD,MAAA,IAIA,OAHA/P,GAAAgQ,IAAA,SAAAvM,EAAA2H,EAAA6E,GACAA,EAAA7E,GAAA3H,EAAAiJ,OAAAwD,QAAA,iBAAA,MAEAlQ,GASAqE,EAAA8L,QAAA,WACA,GAAAjJ,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAhD,YAAAG,KAAAuB,UAAA+G,IACAzI,GAAA4I,OAAAQ,WAAAzG,EACA,IAAAsF,GAAAtF,EAAAa,UACA,OAAAyE,GAAAzE,WAAAwK,UAAA/F,EAAA3F,QAAA,KAAA,EAAA2F,EAAA3F,QAAA,MAAA2L,OAYA,IAAAzI,GAAA,WACA,GAAAjE,GAAAP,MAAAT,UAAAiB,MAAAC,KAAAC,UAEA,OADAH,GAAA6P,QAAAjR,MACAH,EAAA4F,UAAAH,MAAA5C,MAAA,KAAAtB,GAUAqE,GAAAH,MAAA,WACA,MAAAzF,GAAAyF,MAAA5C,MAAA,KAAAnB,YAQAkE,EAAAwH,SAAA,SAAA1J,GACA1D,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA+E,EAAAiL,QACA7Q,EAAAyD,eAAAC,EAAA,YAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA4B,IACAzC,EAAAyD,eAAAC,EAAA,kBAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAoQ,IACAjR,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAwD,IACArE,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAgE,IACA7E,EAAAyD,eAAAC,EAAA,oBAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA+E,EAAAyL,mBACArR,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA+E,EAAA8L,UACA1R,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA2E,KAUAxF,EAAA+F,MAAAI,cAAA,SAAAoH,GACAA,GACA3H,EAAAwH,SAAAuE,SAAApR,YAOA,GAAA4G,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MC1MA,WAEA,QAAA0H,GAAA1H,GAQA,GAAA4R,GAAA,MACAC,EAAA,WACA,GAAAC,KACA,IAAA,mBAAA1K,QAAA,CACA,GAAA2K,GAAA3K,OAAA4K,SAAAD,KACAE,EAAAF,EAAAzP,QAAA,IACA,IAAA2P,EAAA,GAEA,IAAA,GADAC,GAAAH,EAAA/D,UAAAiE,EAAA,GAAAX,MAAA,KACA3P,EAAA,EAAAA,EAAAuQ,EAAAtQ,OAAAD,IAAA,CACA,GAAAwQ,GAAAD,EAAAvQ,GAAA2P,MAAA,IACA,KAAAa,EAAAvQ,SACAkQ,EAAAK,EAAA,IAAAC,mBAAAD,EAAA,GAAAV,QAAAG,EAAA,QAIA,MAAAE,IASAO,EAAA,WAEA,MAAAlS,MAAAmS,WAAAC,QAAAC,UAAAC,UAAAD,UAAAE,cAUAV,EAAA,SAAAW,GAGA,MAFA3S,GAAAyD,eAAAkP,EAAA,cAAA/D,IAAA,WAAA,MAAAiD,MAAAhD,WAAA,IACA7O,EAAAyD,eAAAkP,EAAA,UAAA/D,IAAA,WAAA,MAAAyD,GAAA5Q,KAAAtB,OAAA0O,WAAA,IACA8D,MAGA3S,GAAAgS,SAAAA,EAMA,GAAA7K,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MC7EA,SAAAF,GACA,YACA,SAAA4H,GAAA1H,GAEAA,EAAAwN,QAAAxN,EAAAwN,WAEA,IAAAoF,IACAC,iBACA,QAgBAC,EAAA,SAAAC,GACA/S,EAAA4I,OAAA9G,OAAAiR,EACA,KAAA,GAAApR,GAAA,EAAAA,EAAAiR,EAAAC,gBAAAjR,OAAAD,IAAA,CACA,GAAAyD,GAAAwN,EAAAC,gBAAAlR,EACA3B,GAAA4I,OAAAQ,WAAA2J,EAAA3N,MAYA4N,EAAA,SAAAC,EAAAC,GACAJ,EAAAG,GACAC,EAAAC,IAAAF,EAAAE,IAAAC,KAAAH,GAGAC,EAAAG,MAAArT,EAAA6B,MAAAC,OAAAmR,EAAAI,OAAAJ,EAAAI,MAAAD,KAAAH,GAAAA,EAAAE,IAAAC,KAAAH,GACAC,EAAApP,MAAA9D,EAAA6B,MAAAC,OAAAmR,EAAAnP,OAAAmP,EAAAnP,MAAAsP,KAAAH,GAAAA,EAAAE,IAAAC,KAAAH,GACAC,EAAAI,KAAAtT,EAAA6B,MAAAC,OAAAmR,EAAAK,MAAAL,EAAAK,KAAAF,KAAAH,GAAAA,EAAAE,IAAAC,KAAAH,GACAC,EAAAK,KAAAvT,EAAA6B,MAAAC,OAAAmR,EAAAM,MAAAN,EAAAM,KAAAH,KAAAH,GAAAA,EAAAE,IAAAC,KAAAH,IAUAO,EAAA,WASA,QAAAA,GAAAT,EAAAU,GAEA,GAAAC,MAQAC,EAAA,SAAAC,GACA5T,EAAAY,QAAAgT,KAAA5T,EAAAgD,MAAA8C,SACA8N,EAAA,SAAAC,GACA,OAAAA,EAAAhE,cAAA5B,QACA,IAAA,QACA,IAAA,IACA,IAAA,GACA,IAAA,MACA,IAAAnO,GACA,OAAA,CACA,SACA,OAAA,IAEA8T,IAEAF,EAAAE,kBAAAA,GAaAE,EAAA,SAAAC,GACAf,EAAAe,EAAAL,GACAC,EAAA,MAAAF,EAAAA,EAAAzT,EAAAgS,SAAAhS,EAAAgS,SAAAM,WAAAe,OAAA,GAWA,OATAS,GAAAf,GASA,SAAAiB,GAqCA,MAjBAhU,GAAAyD,eAAAuQ,EAAA,SACApF,IAAA,WACA,MAAA8E,GAAAE,gBACAF,EAAAL,MAGArT,EAAA4F,UAAAiB,OAGAgI,WAAA,IAEA7O,EAAAyD,eAAAuQ,EAAA,SAAApF,IAAA,WAAA,MAAA8E,GAAA5P,OAAA+K,WAAA,IACA7O,EAAAyD,eAAAuQ,EAAA,QAAApF,IAAA,WAAA,MAAA8E,GAAAJ,MAAAzE,WAAA,IACA7O,EAAAyD,eAAAuQ,EAAA,OAAApF,IAAA,WAAA,MAAA8E,GAAAP,KAAAtE,WAAA,IACA7O,EAAAyD,eAAAuQ,EAAA,QAAApF,IAAA,WAAA,MAAA8E,GAAAH,MAAA1E,WAAA,IACA7O,EAAAyD,eAAAuQ,EAAA,mBAAApF,IAAA,WAAA,MAAA+E,IAAA9E,WAAA,IACA7O,EAAAyD,eAAAuQ,EAAA,aAAApF,IAAA,WAAA,MAAAkF,IAAAjF,WAAA,IACAmF,GACAN,EAAAP,KAGA,MAAAK,KASAxT,GAAA+F,MAAAU,WAAA,SAAAC,GACA1G,EAAA6B,MAAAC,OAAA4E,KACA1G,EAAAmT,IAAA,GAAAnT,GAAAwN,QAAAgG,aAAA9M,KAIA1G,EAAAwN,QAAAgG,aAAAA,EAMA,GAAArM,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCvMA,WACA,YACA,SAAA0H,GAAA1H,GAEA,GAAAiU,GAAAjU,EAAAiU,UAQAA,GAAAC,QAAA,WACA,GAAAzL,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAkE,OAAA/G,KAAAuB,UAAA+G,IACAzI,GAAA4I,OAAA8B,SAAA/H,EAGA,KAAA,GAFAwR,MACAC,KACAzS,EAAA,EAAAA,GAAA+J,KAAAC,MAAAD,KAAA2I,KAAA1R,IAAAhB,IACAgB,EAAAhB,IAAA,IACAwS,EAAA3T,KAAAmB,GACAgB,EAAAhB,IAAAA,GACAyS,EAAA5T,KAAAmC,EAAAhB,GAIA,OAAAwS,GAAA/I,OAAAgJ,EAAAE,YAUAL,EAAAM,MAAA,WACA,GAAA9L,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAkE,OAAA/G,KAAAuB,UAAA+G,KACA+L,EAAA9S,UAAA+G,MAAA,EACAgM,EAAA/S,UAAA+G,IAEA,IADAzI,EAAA4I,OAAA8B,SAAA/H,GACA8R,EAAA,CAEA,GADAA,EAAAA,EAAAjR,WAAAqM,cACA,SAAA4E,EACA,MAAAzU,GAAAiU,QAAAS,UAAA/R,EAAA6R,EAEA,IAAA,OAAAC,EACA,MAAAzU,GAAAiU,QAAAU,QAAAhS,EAAA6R,GAGA,MAAA9I,MAAA6I,MAAA5R,EAAA6R,GAAAA,GAUAP,EAAAS,UAAA,WACA,GAAAjM,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAkE,OAAA/G,KAAAuB,UAAA+G,KACA+L,EAAA9S,UAAA+G,MAAA,CAEA,OADAzI,GAAA4I,OAAA8B,SAAA/H,GACA+I,KAAAC,MAAAhJ,EAAA6R,GAAAA,GAUAP,EAAAU,QAAA,WACA,GAAAlM,GAAA,EACA9F,EAAA3C,EAAAY,QAAAT,QAAAH,EAAAgD,MAAAkE,OAAA/G,KAAAuB,UAAA+G,KACA+L,EAAA9S,UAAA+G,MAAA,CAEA,OADAzI,GAAA4I,OAAA8B,SAAA/H,GACA+I,KAAAkJ,KAAAjS,EAAA6R,GAAAA,GAQAP,EAAA7G,SAAA,SAAA1J,GACA1D,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAb,EAAAiU,QAAAC,UACAlU,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAb,EAAAiU,QAAAM,QACAvU,EAAAyD,eAAAC,EAAA,aAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAb,EAAAiU,QAAAS,YACA1U,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAb,EAAAiU,QAAAU,WAUA3U,EAAA+F,MAAAM,YAAA,SAAAkH,GACAA,GACA0G,EAAA7G,SAAAlM,OAAAX,YAOA,GAAA4G,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCnIA,WACA,YACA,SAAA0H,GAAA1H,GAEA,GAAA6U,GAAA7U,EAAA6U,WASApS,EAAA,WACA,MAAAzC,GAAA+B,SAAA5B,OAYA8Q,EAAA,SAAAtN,EAAAuN,GACA,MAAAlR,GAAAyD,eAAAtD,KAAAwD,EAAAuN,IAWA7M,EAAA,SAAAyQ,GACA,MAAA9U,GAAA+D,OAAA5D,KAAA2U,IAYAjQ,EAAA,WACA,GAAAtD,GAAAP,MAAAT,UAAAiB,MAAAC,KAAAC,UAEA,OADAH,GAAA6P,QAAAjR,MACAH,EAAA6U,QAAA3P,OAAArC,MAAA,KAAAtB,GAUAsT,GAAA3P,OAAA,WACA,MAAAlF,GAAAkF,OAAArC,MAAA,KAAAnB,WAUA,IAAAqT,GAAA,WACA,MAAA/U,GAAA6U,QAAA1K,QAAAhK,MAUA0U,GAAA1K,QAAA,SAAAzG,GACA,IAAA,GAAAE,KAAAF,GACA,GAAAA,EAAA6B,eAAA3B,GACA,OAAA,CAEA,QAAA,EAYA,IAAA4B,GAAA,WACA,GAAAjE,GAAAP,MAAAT,UAAAiB,MAAAC,KAAAC,UAEA,OADAH,GAAA6P,QAAAjR,MACAH,EAAA6U,QAAApP,MAAA5C,MAAA,KAAAtB,GAUAsT,GAAApP,MAAA,WACA,MAAAzF,GAAAyF,MAAA5C,MAAA,KAAAnB,YAQAmT,EAAAzH,SAAA,SAAA1J,GACA1D,EAAAyD,eAAAC,EAAA,YAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA4B,IACAzC,EAAAyD,eAAAC,EAAA,kBAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAoQ,IACAjR,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAwD,IACArE,EAAAyD,eAAAC,EAAA,UAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAgE,IACA7E,EAAAyD,eAAAC,EAAA,WAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAAkU,IACA/U,EAAAyD,eAAAC,EAAA,SAAA2J,YAAA,EAAAC,UAAA,EAAAzM,MAAA2E,KAUAxF,EAAA+F,MAAAQ,YAAA,SAAAgH,GACAA,GACAsH,EAAAzH,SAAAlK,OAAA3C,YAOA,GAAA4G,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH,MCzKA,WACA,YACA,SAAA0H,GAAA1H,GA+DA,QAAAgV,GAAAC,GACA,GAAAC,GAAA,GAAAC,GACAC,EAAAH,GAAA,EAEA9U,MAAAkV,KAAA,WACA,GAAAC,GAAAJ,EAAAG,MAEA,OADArV,GAAAmT,IAAAE,MAAA+B,EAAA,UAAAE,EAAA,OACAA,GAGAJ,EAAAK,QAQA,QAAAJ,KACA,GAAAK,GAAA,KACAC,EAAA,KACAC,GAAA,CAOAvV,MAAAoV,MAAA,WACAG,IACAD,EAAA,KACAC,GAAA,EACAF,GAAA,GAAAnU,OAAAuD,YASAzE,KAAAkV,KAAA,WAKA,MAJAK,KACAD,GAAA,GAAApU,OAAAuD,UACA8Q,GAAA,GAEAvV,KAAAmV,YAQAnV,KAAAmV,SAAA,WACA,MAAAI,IAGA,GAAArU,OAAAuD,UAAA4Q,EAFAC,EAAAD,GAUArV,KAAAwV,MAAA,WACAD,GAAA,EACAF,EAAA,KACAC,EAAA,MAlIAzV,EAAAwN,QAAAxN,EAAAwN,WAOA,IAAAoI,GAAA,WAKA,QAAAA,KAEA,GAAAC,MASAC,EAAA,SAAAb,GACAY,EAAArV,KAAA,GAAAwU,GAAAC,KAUAc,EAAA,WACA,MAAAF,GAAAjU,OAAA,EACAiU,EAAAlV,MAAA0U,OADA,OAIA,OAAA,UAAAW,GAGA,MAFAhW,GAAAyD,eAAAuS,EAAA,QAAApH,IAAA,WAAA,MAAAkH,IAAAjH,WAAA,IACA7O,EAAAyD,eAAAuS,EAAA,OAAApH,IAAA,WAAA,MAAAmH,IAAAlH,WAAA,IACAmH,OAIA,MAAAJ,KAwFA5V,GAAAwN,QAAAoI,eAAAA,EACA5V,EAAAwN,QAAAwH,iBAAAA,EACAhV,EAAAwN,QAAA2H,UAAAA,EACAnV,EAAAkV,GAAA,GAAAlV,GAAAwN,QAAAoI,eAMA,GAAAzO,GACA,mBAAAC,QACAA,OACA,mBAAAC,QACAA,OACAlH,IAEA,oBAAAmH,SAAA,mBAAAA,QAAAC,KAEAD,OAAA,WAAA,MAAAI,KACAP,EAAAnH,EAAAA,GAEA,mBAAAwH,QACA,mBAAAA,QAAAC,UACAD,OAAAC,QAAAC,GAGA,mBAAAP,GAAAnH,GAEA0H,EAAAP,EAAAnH","file":"zana.min.js","sourcesContent":["/**\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    /**\r\n        The main container for all zUtil items.\r\n\r\n        @param [object] settings An optional set of settings to define items.\r\n        @param [boolean] settings.useArrayExtensions A boolean flag to determine whether or not to extend Array.prototype.\r\n        @param [boolean] settings.useObjectExtensions A boolean flag to determine whether or not to extend Object.prototype.\r\n        @param [object] settings.defaultLogger An object which defines all of the required logger fields to be used by zUtil.log.\r\n    */\r\n    function Zana(/* settings */) {\r\n        // this.setup(settings);\r\n    }\r\n    var z = new Zana();\r\n\r\n    /**\r\n        Class for containing a max reference counter\r\n        as well as two stacks of references to objects.\r\n        To be used with deepCopy and equals.\r\n        \r\n        @class Contains two reference stacks as well as a defined max stack depth.\r\n    */\r\n    var RecursiveCounter = (function() {\r\n        function RecursiveCounter(maxStackDepth) {\r\n            this.xStack = [];\r\n            this.yStack = [];\r\n            this.count = 0;\r\n            this.maxStackDepth = maxStackDepth;\r\n        }\r\n        RecursiveCounter.prototype.push = function(x, y) {\r\n            this.xStack.push(x);\r\n            this.yStack.push(y);\r\n            this.count++;\r\n        };\r\n        RecursiveCounter.prototype.pop = function() {\r\n            this.xStack.pop();\r\n            this.yStack.pop();\r\n            this.count--;\r\n        };\r\n        return RecursiveCounter;\r\n    })();\r\n\r\n    /**\r\n        Collects the type for a given value.\r\n        \r\n        @param {any} value The value from which to collect the type.\r\n        @returns {string} The type of the value.\r\n    */\r\n    z.getType = function(value) {\r\n        var t = typeof value;\r\n        if (t !== 'object')\r\n            return t;\r\n        if (value === null)\r\n            return 'null';\r\n        switch(value.constructor) {\r\n            case Array:     return 'array';\r\n            case String:    return 'string';\r\n            case Number:    return 'number';\r\n            case Boolean:   return 'boolean';\r\n            case RegExp:    return 'regexp';\r\n            case Date:      return 'date';\r\n        }\r\n        return 'object';\r\n    };\r\n\r\n    /**\r\n        Returns the first non-null or non-undefined argument.\r\n\r\n        @param {...any} var_args The list of arguments to check for existence.\r\n        @returns {any} If no arguments exist then null, else the existing argument.\r\n    */\r\n    z.coalesce = function(/* arguments */) {\r\n        var args = Array.prototype.slice.call(arguments);\r\n        for (var i = 0; i < args.length; i++) {\r\n            if (z.check.exists(args[i])) {\r\n                return args[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n        Builds a deep copy of the provided source.\r\n        \r\n        @param {any} origSource The item from which to build the deep copy.\r\n        @returns {any} The copy of the provided source.\r\n        @throws {error} An error is thrown if the recursive object stack grows greater than 1000.\r\n    */\r\n    z.deepCopy = function(origSource) {\r\n        var origIndex = -1;\r\n        var rc = new RecursiveCounter(1000);\r\n\r\n        function _singleCopy(sourceRef, copyRef) {\r\n            origIndex = rc.xStack.indexOf(sourceRef);\r\n            if (origIndex === -1) {\r\n                rc.push(sourceRef, copyRef);\r\n                z.forEach(sourceRef, function(value, key) {\r\n                    copyRef[key] = _deepCopy(value);\r\n                });\r\n                rc.pop();\r\n                return copyRef;\r\n            }\r\n            else {\r\n                // source item has already been copied\r\n                // return the reference to the copied item\r\n                return rc.yStack[origIndex];\r\n            }\r\n        }\r\n\r\n        function _funcCopy(source) {\r\n            // rebuild the function from the original body and arguments\r\n            // var s = source.toString();\r\n            // var args = s.substring(s.indexOf(\"(\")+1, s.indexOf(\")\")).trim().split(\",\");\r\n            // args.map(function(val, index, arr) {\r\n            //     arr[index] = val.trim();\r\n            // });\r\n            // var body = s.substring(s.indexOf(\"{\")+1, s.indexOf(\"}\")).trim();\r\n            // var anonymous = new Function(args, body); // may need to consider the \"this\" property\r\n            // // make sure we collect any properties which may have been set on the function\r\n\r\n            var temp = function() { return source.apply(source, arguments); };\r\n            z.forEach(source, function(x, key) {\r\n                temp[key] = _deepCopy(x);\r\n            });\r\n\r\n            return _singleCopy(source, temp);\r\n\r\n            // return _singleCopy(source, anonymous);\r\n        }\r\n\r\n        function _deepCopy(source) {\r\n            if (rc.count > rc.maxStackDepth) throw new Error(\"Stack depth exceeded: \" + rc.stackMaxDepth + \"!\");\r\n            switch (z.getType(source)) {\r\n                case z.types.object:\r\n                    return _singleCopy(source, Object.create(Object.getPrototypeOf(source)));\r\n                case z.types.array:\r\n                    return _singleCopy(source, []);\r\n                case z.types.regexp:\r\n                    return _singleCopy(source, new RegExp(source));\r\n                case z.types.date:\r\n                    return _singleCopy(source, new Date(source.toString()));\r\n                case z.types.function:\r\n                    return _funcCopy(source);\r\n                default: // need to handle functions differently?\r\n                    return source;\r\n            }\r\n        }\r\n        return _deepCopy(origSource);\r\n    };\r\n\r\n    /**\r\n        Defines a property on this provided item.\r\n        \r\n        @this {object}\r\n        @param {any} obj The item to which to add the property.\r\n        @param {string} name The name of the property.\r\n        @param {any} prop The property to add.\r\n        @returns {void}\r\n    */\r\n    z.defineProperty = function(obj, name, prop) {\r\n        if (obj[name] == null) {\r\n            Object.defineProperty(obj, name, prop); \r\n        }\r\n        else {\r\n            console.error(\r\n                \"Error: the method \" \r\n                + name\r\n                + \" has already been defined on the following object: \" \r\n                + obj\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n        Compares the equality of two provided items.\r\n        \r\n        @param {any} x The first item to compare.\r\n        @param {any} y The second item to compare.\r\n        @returns {boolean} True if the provided values are equal, false if not.\r\n        @throws {error} An error is thrown if the recursive function stack grows greater than 1000.\r\n    */\r\n    z.equals = function(x, y) {\r\n        var rc = new RecursiveCounter(1000);\r\n\r\n        function _compareObject(x, y) {\r\n            // check for reference equality\r\n            if (x === y) {\r\n                return true;\r\n            }\r\n            var xKeys = Object.keys(x);\r\n            var yKeys = Object.keys(y);\r\n            xKeys.quicksort();\r\n            yKeys.quicksort();\r\n            if (!_equals(xKeys, yKeys)) {\r\n                return false;\r\n            }\r\n            rc.push(x, y);\r\n            for (var k in x) {\r\n                if (!_equals(x[k], y[k])) {\r\n                    return false;\r\n                }\r\n            }\r\n            rc.pop();\r\n            return true;\r\n        }\r\n\r\n        function _equals(x, y) {\r\n            if (rc.count > rc.maxStackDepth) throw new Error(\"Stack depth exceeded: \" + rc.maxStackDepth + \"!\");\r\n            // check for reference and primitive equality\r\n            if (x === y) {\r\n                return true;\r\n            }\r\n            // check for type equality\r\n            var xType = z.getType(x);\r\n            var yType = z.getType(y);\r\n            if (xType !== yType) {\r\n                return false;\r\n            }\r\n            // check for circular references\r\n            var xIndex = rc.xStack.lastIndexOf(x);\r\n            var yIndex = rc.yStack.lastIndexOf(y);\r\n            if (xIndex !== -1) {\r\n                if (yIndex !== -1) {\r\n                    // don't care about object reference equality\r\n                    // when checking for object equality\r\n                    return true;\r\n                    // if we do care about object reference equality,\r\n                    // then a strict comparison of stack location of objects\r\n                    // needs to be executed and returned\r\n                }\r\n            }\r\n            // check for inequalities\r\n            switch(xType) {\r\n                case z.types.date:\r\n                    if (x.getTime() !== y.getTime()) {\r\n                        return false;\r\n                    }\r\n                    // check for extra properties stored on the Date object\r\n                    if (!_compareObject(x, y)) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case z.types.function:\r\n                    // if (!z.equals(z.functions.getBody(x), z.functions.getBody(y))) {\r\n                    //     // function body mismatch\r\n                    //     return false;\r\n                    // }\r\n                    // if (!z.equals(z.functions.getArgumentNames(x), z.functions.getArgumentNames(y))) {\r\n                    //     // function arguments mismatch\r\n                    //     return false;\r\n                    // }\r\n                    if (!_compareObject(x, y)) {\r\n                        // property mismatch on function\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case z.types.array:\r\n                    if (x.length !== y.length) {\r\n                        return false;\r\n                    }\r\n                    rc.push(x, y);\r\n                    for (var i = 0; i < x.length; i++) {\r\n                        if (!_equals(x[i], y[i])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    rc.pop();\r\n                    break;\r\n                case z.types.object:\r\n                case z.types.regexp:\r\n                    if (!_compareObject(x, y)) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (x !== y) {\r\n                        return false;\r\n                    }\r\n                    break;\r\n            }\r\n            return true;\r\n        }\r\n        return _equals(x, y);\r\n    };\r\n\r\n    /**\r\n        Internal extend call.\r\n        Performance abstraction to bypass all the argument shenanigans,\r\n        as we know we will only be extending two items at a time internally.\r\n\r\n        @param {any} a The item on which to extend the second.\r\n        @param {any} b The item to extend onto the first.\r\n        @returns {any} The reference to the first item.\r\n    */\r\n    var _extend = function(a, b) {\r\n        z.forEach(b, function(val, key) {\r\n            if (!z.check.exists(a[key]))\r\n                a[key] = b[key];\r\n            else if (z.check.isSmashable(a[key], b[key]))\r\n                _extend(a[key], b[key]);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Extends the properties on the provided arguments into the original item.\r\n        Any properties on the tail arguments will not overwrite\r\n        any properties on the first argument, and any references will be shallow.\r\n        \r\n        @param {any} a The target to be extended.\r\n        @param {...any} var_args The tail items to extend onto the target.\r\n        @returns {any} A reference to the extended target.\r\n    */\r\n    z.extend = function(a /*, b, b2, ... n */) {\r\n        Array.prototype.slice.call(arguments, 1).forEach(function(b) {\r\n            if (z.check.isSmashable(a, b))\r\n                _extend(a, b);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Iterates over an iterable object or array,\r\n        calling the provided method with the provided optional context,\r\n        as well as the value and the key for the current item.\r\n\r\n        @param {object|array|date|regexp} item The item over which to iterate.\r\n        @param {function} method The method to call for each iterated item.\r\n        @param {object} context The context to set to \"this\" for the method.\r\n        @returns {object|array|date|regexp} The reference to the original item.\r\n    */\r\n    z.forEach = function(item, method, context) {\r\n        var itemType = z.getType(item);\r\n        switch(itemType) {\r\n            case z.types.date:\r\n            case z.types.function:\r\n            case z.types.object:\r\n            case z.types.regexp:\r\n                for (var key in item) {\r\n                    if (item.hasOwnProperty(key)) {\r\n                        method.call(context, item[key], key, item);\r\n                    }\r\n                }\r\n                break;\r\n            case z.types.arguments:\r\n            case z.types.array:\r\n                for (var i = 0; i < item.length; i++) {\r\n                    method.call(context, item[i], i, item);\r\n                }\r\n                break;\r\n        }\r\n        return item;\r\n    };\r\n\r\n    /**\r\n        Internal smash call.\r\n        Performance abstraction to bypass all the argument shenanigans,\r\n        as we know we will only be smashing two items at a time internally.\r\n\r\n        @param {any} a The item on which to smash the second.\r\n        @param {any} b The item to smash onto the first.\r\n        @returns {any} The reference to the first item.\r\n    */\r\n    var _smash = function(a, b) {\r\n        z.forEach(b, function(val, key) {\r\n            if (z.check.isSmashable(a[key], b[key]))\r\n                _smash(a[key], b[key]);\r\n            else\r\n                a[key] = z.deepCopy(b[key]);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Smashes the properties on the provided arguments into the first argument.\r\n        Any properties on the tail arguments will overwrite\r\n        any existing properties on the first argument.\r\n        \r\n        @param {any} a The target to be smashed.\r\n        @param {...any} var_args The tail items to smash onto the target.\r\n        @returns {any} A reference to the smashed target.\r\n    */\r\n    z.smash = function(a /*, b, b2, ... n */) {\r\n        Array.prototype.slice.call(arguments, 1).forEach(function(b) {\r\n            if (z.check.isSmashable(a, b))\r\n                _smash(a, b);\r\n        });\r\n        return a;\r\n    };\r\n\r\n    /**\r\n        Converts a string representation of a \r\n        lambda function into a javascript function\r\n    \r\n        Note: This is awkward and inefficient, and should absolutely be replaced\r\n        by arrow functions when ECMAScript 6 is available.\r\n        \r\n        @param {null|function|string} [expression] The string representation of the expression to convert into a function.\r\n        @returns {function} \r\n             If a string expression is provided, the function for the expression. \r\n             If a function is provided, then return the function.\r\n             If expression is null or undefined, return functions.identity.\r\n     */\r\n    z.lambda = function(expression) {\r\n        if (expression == null) {\r\n            return z.functions.identity;\r\n        }\r\n        else if (z.getType(expression) === z.types.function) {\r\n            return expression;\r\n        }\r\n        else if (z.getType(expression) === z.types.string) {\r\n            if (z.equals(expression, \"\")) {\r\n                return z.functions.identity;\r\n            }\r\n            // else if (expression.indexOf(\"=>\") > -1) {\r\n            //     var match = expression.match(z.functions.matcher);\r\n            //     var args = match[1] || [];\r\n            //     var body = match[2];\r\n            //     return new Function(args, \"return \" + body + \";\").bind(arguments.callee.caller);\r\n            // }\r\n        }\r\n        // throw error or assume equality check? \r\n        // see unitTests.removeAll for methods using the default equals\r\n        return function(x) { return z.equals(expression, x); }; \r\n    };\r\n\r\n    /**\r\n        Executes setup methods based on the provided settings object.\r\n         \r\n        @param {object} settings The settings object.\r\n        @param {boolean} [settings.useArrayExtensions]  A boolean flag used to determine whether or not to extend Array.prototype.\r\n        @param {boolean} [settings.useNumberExtensions] A boolean flag used to determine whether or not to extend Number.prototype.\r\n        @param {boolean} [settings.useObjectExtensions] A boolean flag used to determine whether or not to extend Object.prototype.\r\n        @param {object} [settings.defaultLogger] The default logger interface to apply to the default zUtil.log class.\r\n    */\r\n    z.setup = function(settings) {\r\n        settings = settings || {};\r\n        if (z.setup.initArrays)\r\n            z.setup.initArrays(settings.useArrayExtensions);\r\n        if (z.setup.initFunctions)\r\n            z.setup.initFunctions(settings.useFunctionExtensions);\r\n        if (z.setup.initNumbers)\r\n            z.setup.initNumbers(settings.useNumberExtensions);\r\n        if (z.setup.initObjects)\r\n            z.setup.initObjects(settings.useObjectExtensions);\r\n        if (z.setup.initLogger)\r\n            z.setup.initLogger(settings.defaultLogger);\r\n    };\r\n\r\n    /**\r\n        Define constants for the library.\r\n     */\r\n    z.functions = {\r\n        \"identity\": function(x) { return x; }\r\n        , \"true\": function() { return true; }\r\n        , \"false\": function() { return false; }\r\n        , \"empty\": function() { }\r\n        , \"matcher\": /^(?:[(\\s*]*)?(\\w+(?:,\\s*\\w+)*)?(?:[)\\s*]*)?=>(?:\\s*)?(.*)$/\r\n    };\r\n    z.types = {\r\n        \"arguments\":    z.getType(arguments) \r\n        , \"array\":      z.getType([])\r\n        , \"boolean\":    z.getType(true)\r\n        , \"date\":       z.getType(new Date())\r\n        , \"function\":   z.getType(function(){})\r\n        , \"null\":       z.getType(null)\r\n        , \"number\":     z.getType(0)\r\n        , \"object\":     z.getType({})\r\n        , \"string\":     z.getType(\"\")\r\n        , \"regexp\":     z.getType(new RegExp())\r\n        , \"undefined\":  z.getType(undefined)\r\n    };\r\n\r\n    return (function() {\r\n        var root = (\r\n            typeof window !== 'undefined' ?\r\n                window\r\n                : typeof global !== 'undefined' ?\r\n                    global \r\n                    : this\r\n        );\r\n        if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n            root.z = z;\r\n            define(function() {\r\n                return z;\r\n            });\r\n        }\r\n        else if (typeof module !== 'undefined') {\r\n            if (typeof module.exports !== 'undefined') {\r\n                module.exports = z;\r\n            }\r\n        }\r\n        else {\r\n            // assume browser, expose to root\r\n            root.z = z;\r\n        }\r\n        return z;\r\n    })();\r\n})();","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var arrays = z.arrays = {};\r\n\r\n        /**\r\n            Performs the provided method on each element of array,\r\n            using the previous result and the current item as\r\n            arguments for the method.\r\n            \r\n            Note that we could really just use Array.prototype.reduce -- same thing.\r\n            \r\n            @this {array}\r\n            @param {array} source The original array.\r\n            @param {function} func A function used to return the result of an operation on the current element and previous result.\r\n            @param {function} [seed] An optional seed to use as the the first argument with the first item in the array.\r\n            @returns The result of the aggregate function on the array.\r\n        */\r\n        arrays.aggregate = function(/* source, func, seed */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var func = arguments[argsIterator++];\r\n            var seed = arguments[argsIterator++];\r\n            z.assert.isNonEmptyArray(source);\r\n            var result;\r\n            func = z.lambda(func);\r\n            if (seed == null) {\r\n                result = source[0];\r\n            }\r\n            else {\r\n                result = func(seed, source[0]);\r\n            }\r\n            for (var i = 1; i < source.length; i++) {\r\n                result = func(result, source[i]);\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Searches the array for at least one item \r\n            which either exists, or matches a given predicate.\r\n            \r\n            @this {Array}\r\n            @param {array} source The original array.\r\n            @param {function} [predicate] A predicate used to find matches for the array. This function should return a truthy value.\r\n            @returns True if at least one item is found which exists or matches the given predicate, else false.\r\n        */\r\n        arrays.any = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (predicate == null) {\r\n                return source.length > 0;\r\n            }\r\n            predicate = z.lambda(predicate);\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (predicate(source[i])) {\r\n                    return true;\r\n                }    \r\n            }\r\n            return false;\r\n        };\r\n\r\n        /**\r\n            Collects the average of an array of numbers or a given numeric property for an array of objects.\r\n            \r\n            @this {Array}\r\n            @param {string} [selector] A property name.\r\n            @returns The average of either the array itself, or the given property.\r\n        */\r\n        arrays.average = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            return arrays.sum(source, selector) / source.length;\r\n        };\r\n\r\n        /**\r\n            Searches the array for items for a match for a given item.\r\n            \r\n            @this {Array}\r\n            @param {any} item The item for which to search. or the predicate to use for matching.\r\n            @param {function} [selector] The optional selector function used to select an item from the array for matching.\r\n            @returns True if the item is found, else false.\r\n        */\r\n        arrays.contains = function(/* source, item, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var item = arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var comparer;\r\n            var i;\r\n            if (z.check.isFunction(item)) \r\n                comparer = function(x) { return item(x); };\r\n            else\r\n                comparer = function(x, y) { return z.equals(x, y); };\r\n\r\n            if (selector == null) {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(source[i], item)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(selector(source[i]), item)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        /**\r\n            Searches the array for items for matches for a given item.\r\n            \r\n            @this {Array}\r\n            @param {any} item The item for which to search.\r\n            @param {function} [selector] The optional selector function used to select an item from the array for matching.\r\n            @returns The count of the matches found.\r\n        */\r\n        arrays.count = function(/* source, item, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var item = arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var count = 0;\r\n            var comparer;\r\n            var i;\r\n            if (z.check.isFunction(item)) \r\n                comparer = function(x) { return item(x); };\r\n            else\r\n                comparer = function(x, y) { return z.equals(x, y); };\r\n\r\n            if (selector == null) {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(source[i], item)) {\r\n                        count++;\r\n                    }\r\n                } \r\n            }\r\n            else {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (comparer(selector(source[i]), item)) {\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            return count;\r\n        };\r\n\r\n        /**\r\n            Builds a deep copy of the original array.\r\n            To be used for the Array.prototype extension.\r\n\r\n            @this {array} The array from which to build the deep copy.\r\n            @returns {any} A deep copy of the original array.\r\n            @throws {error} An error is thrown if the recursive object stack grows greater than 1000.\r\n        */\r\n        var _deepCopy = function() {\r\n            return z.deepCopy(this);\r\n        };\r\n\r\n        /**\r\n            Builds a compressed array from the original, containing only distinct items.\r\n            If a selector is given, then uniqueness will be determined by \r\n            comparing the selected properties from objects on the array.\r\n            \r\n            @this {array}\r\n            @param {string} [selector] A property name.\r\n            @returns {array} A deep copied, distinct set of items.\r\n        */\r\n        arrays.distinct = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var result = [];\r\n            var i;\r\n            if (selector == null) {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (!result.contains(source[i])) {\r\n                        result.push(source[i]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (!result.contains(selector(source[i]), selector)) {\r\n                        result.push(source[i]);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Compares the equality of the original and a provided array.\r\n            To be used for the Array.prototype extension.\r\n\r\n            @this {array} The first array to compare.\r\n            @param {array} arr2 The second array to compare.\r\n            @returns {boolean} True if both arrays contain equal items, false if not.\r\n            @throws {error} An error is thrown if the recursive function stack grows greater than 1000.\r\n        */\r\n        var _equals = function(arr2) {\r\n            return z.equals(this, arr2);\r\n        };\r\n\r\n        /**\r\n            Collects the first available value on the array\r\n            optionally based on a given predicate. \r\n            \r\n            @this {array} The array on which to search for a max value.\r\n            @param {function} [predicate] The optional predicate used to find the first match.\r\n            @returns {any} If no predicate is available, then the first item. If the predicate is available, the first item which matches.\r\n        */\r\n        arrays.first = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (predicate == null) {\r\n                if (source.length > 0) {\r\n                    return source[0];\r\n                }\r\n            }\r\n            else {\r\n                predicate = z.lambda(predicate);\r\n                for (var i = 0; i < source.length; i++) {\r\n                    if (predicate(source[i])) {\r\n                        return source[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        var _flatten = function(input, output) {\r\n            for (var i = 0; i < input.length; i++) {\r\n                var current = input[i];\r\n                if (!z.check.isArray(current))\r\n                    output.push(current);\r\n                else\r\n                    _flatten(current, output);\r\n            }\r\n            return output;\r\n        };\r\n\r\n        arrays.flatten = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            return _flatten(source, []);\r\n        };\r\n\r\n        /**\r\n            Sets up two arrays of objects to be joined together.\r\n            \r\n            @this {array.<object>} The initial left array used for the inner join\r\n            @param {array.<object>} [rightArray] The secondary right array used for the inner join.\r\n            @returns {function} Returns an object containing the on method to be called after original inner join setup.\r\n        */\r\n        arrays.innerJoin = function(/* leftArray, rightArray */) {\r\n            var argsIterator = 0;\r\n            var leftArray = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var rightArray = arguments[argsIterator++];\r\n            // z.check.isNonEmptyArray(rightArray);\r\n            return {\r\n                /**\r\n                    Joins two arrays of objects together based on a provided predicate.\r\n\r\n                    @param {function} predicate The predicate used to find matches between the left and right arrays.\r\n                    @returns {array.<object>} The inner joined collection of left and right arrays.\r\n                */\r\n                on: function(predicate) {\r\n                    var target = [];\r\n                    predicate = z.lambda(predicate);\r\n                    for (var i = 0; i < leftArray.length; i++) {\r\n                        z.check.isObject(leftArray[i]);\r\n                        for (var k = 0; k < rightArray.length; k++) {\r\n                            z.check.isObject(rightArray[k]);\r\n                            if (predicate(leftArray[i], rightArray[k])) {\r\n                                target.push(z.smash({}, leftArray[i], rightArray[k]));\r\n                            }\r\n                        }\r\n                    }\r\n                    return target;\r\n                }\r\n            };\r\n        };\r\n\r\n        /**\r\n            Checks to see if an array is empty.\r\n            \r\n            @param {array} source The array to check for emptiness.\r\n            @returns {boolean} True if the array contains no elements, or a combination of undefined or null elements, false if not.\r\n        */\r\n        arrays.isEmpty = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            if (source.length < 1) {\r\n                return true;\r\n            }\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (z.check.exists(source[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Checks to see if an array is full.\r\n            \r\n            @param {array} source The array to check for emptiness.\r\n            @returns {boolean} True if the array contains no elements, or a combination of undefined or null elements, false if not.\r\n        */\r\n        arrays.isFull = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            if (source.length < 1) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (!z.check.exists(source[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Collects the last available value on the array\r\n            optionally based on a given predicate. \r\n            \r\n            @this {array} The array on which to search for a max value.\r\n            @param {function} [predicate] The optional predicate used to find the last match.\r\n            @returns {any} If no predicate is available, then the last item. If the predicate is available, the last item which matches.\r\n        */\r\n        arrays.last = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (predicate == null) {\r\n                if (source.length > 0) {\r\n                    return source[source.length-1];\r\n                }\r\n            }\r\n            else {\r\n                predicate = z.lambda(predicate);\r\n                for (var i = source.length-1; 0 <= i; i--) {\r\n                    if (predicate(source[i])) {\r\n                        return source[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n            Collects the maximum value of an array of numbers \r\n            or a given numeric property for an array of objects.\r\n            \r\n            @this {array} The array on which to search for a max value.\r\n            @param {string} [selector] A property name.\r\n            @returns The maximum value of either the array itself, or the given property.\r\n        */\r\n        arrays.max = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var maxValue = Number.MIN_VALUE;\r\n            var selected;\r\n            var i;\r\n            if (selector != null) {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = selector(source[i]);\r\n                    if (z.check.isNumber(selected) && maxValue < selected) {\r\n                        maxValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = source[i];\r\n                    if (z.check.isNumber(selected) && maxValue < selected) {\r\n                        maxValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            return maxValue;\r\n        };\r\n\r\n        /**\r\n            Collects the minimum value of an array of numbers \r\n            or a given numeric property for an array of objects.\r\n            \r\n            @param {array} source The source array from which to collect min value.\r\n            @param {function} [selector] A selector function.\r\n            @returns The minimum value of either the array itself, or the given property.\r\n        */\r\n        arrays.min = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var minValue = Number.MAX_VALUE;\r\n            var selected;\r\n            var i;\r\n            if (selector != null) {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = selector(source[i]);\r\n                    if (z.check.isNumber(selected) && selected < minValue) {\r\n                        minValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < source.length; i++) {\r\n                    selected = source[i];\r\n                    if (z.check.isNumber(selected) && selected < minValue) {\r\n                        minValue = selected;\r\n                    }\r\n                }\r\n            }\r\n            return minValue;\r\n        };\r\n\r\n        /**\r\n            Mutates the provided array based on a given mutator function.\r\n            Each item of the array will be passed through the mutator function,\r\n            setting the return from the mutator back to the original array index.\r\n            \r\n            @param {array} source The source array from which to collect min value.\r\n            @param {function} mutator The mutator function.\r\n            @returns A reference to the original (now mutated) array.\r\n        */\r\n        arrays.mutate = function(/* source, mutator */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var mutator = arguments[argsIterator++];\r\n            mutator = z.lambda(mutator);\r\n            if (z.check.isFunction(mutator)) {\r\n                z.forEach(source, function(val, key) {\r\n                    source[key] = mutator(source[key]);\r\n                });\r\n            }\r\n            return source;\r\n        };\r\n\r\n        /**\r\n            Creates an deep copy of the original array of objects, ordered by the given key. \r\n            \r\n            @this {Object[]}\r\n            @param {function|string} selector The method or lambda string used to select a key by which to order.\r\n            @param {function} [predicate] A predicate used to determine whether one object is greater than, less than, or equal to another. If no predicate is defined, then the javascript > and < comparators are used.\r\n        */\r\n        arrays.orderBy = function(/* source, selector, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            selector = z.lambda(selector);\r\n            predicate = predicate || function(x, y) {\r\n                return ((selector(x) > selector(y)) ? 1 : (selector(x) < selector(y)) ? -1 : 0);\r\n            };\r\n            var containsKey = source.where(function(obj) { return selector(obj) != null; });\r\n            var missingKey = source.where(function(obj) { return selector(obj) == null; }); // don't bother sorting items with null or undefined keys\r\n            containsKey.quicksort(predicate); \r\n            return containsKey.concat(missingKey);\r\n        };\r\n\r\n        /**\r\n            Sorts the original, given array in place by using the quicksort algorithm.\r\n            \r\n            @this {Array}\r\n            @param {string|function} [predicate] A predicate used to determine whether one item is greater than, less than, or equal to another. If no predicate is defined, then the javascript > and < comparators are used.\r\n        */\r\n        arrays.quicksort = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (z.getType(predicate) === z.types.string) {\r\n                predicate = z.lambda(predicate);\r\n            }\r\n            else {\r\n                // dont accidentally take z.functions.identity - use this else statement\r\n                predicate = predicate || function(x, y) {\r\n                    return (x > y) ? 1 : ((x < y) ? -1 : 0);\r\n                };\r\n            }\r\n\r\n            var comparer = function(x, y, xIndex, yIndex) {\r\n                var c = predicate(x, y);\r\n                if (c === 0)\r\n                    return xIndex - yIndex;\r\n                return c;\r\n            };\r\n\r\n            // more efficient to declare the internal call outside and just pass params around?\r\n            // probably is -- more testing should be done here for optimization\r\n            var internalQuickSort = function(left, right) {\r\n                do {\r\n                    var i = left;\r\n                    var j = right;\r\n                    var pivot = Math.floor((left + right) / 2);\r\n                    var p = source[pivot];\r\n                    do {\r\n                        while ((i < source.length) && (comparer(source[i], p, i, pivot) < 0)) {\r\n                            i++;\r\n                        }\r\n                        while ((0 <= j) && (comparer(p, source[j], pivot, j) < 0)) {\r\n                            j--;\r\n                        }\r\n                        if (i > j) {\r\n                            break; // left index has crossed right index, stop the loop\r\n                        }\r\n                        if (i < j) {\r\n                            source.swap(i, j); // swap the indexes in the source\r\n                        }\r\n                        i++;\r\n                        j--;\r\n                    } while (i <= j);\r\n                    if ((j - left) <= (right - i)) {\r\n                        if (left < j) {\r\n                            internalQuickSort(left, j);\r\n                        }\r\n                        left = i;\r\n                    }\r\n                    else {\r\n                        if (i < right) {\r\n                            internalQuickSort(i, right);\r\n                        }\r\n                        right = j;\r\n                    }\r\n                } while (left < right);\r\n            };\r\n            internalQuickSort(0, this.length-1);\r\n        };\r\n\r\n        /**\r\n            Sorts the original, given array in place \r\n            by using the quicksort algorithm with three-way partitioning.\r\n            \r\n            @this {Array}\r\n            @param {string|function} [predicate] A predicate used to determine whether one item is greater than, less than, or equal to another. If no predicate is defined, then the javascript > and < comparators are used.\r\n        */\r\n        arrays.quicksort3 = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            if (z.getType(predicate) === z.types.string) {\r\n                predicate = z.lambda(predicate);\r\n            }\r\n            else {\r\n                // dont accidentally take z.functions.identity - use this else statement\r\n                predicate = predicate || function(x, y) {\r\n                    return (x > y) ? 1 : ((x < y) ? -1 : 0);\r\n                };\r\n            }\r\n            var internalQuickSort = function(left, right) {\r\n                var indexForLessThan = left;\r\n                var indexForGreaterThan = right;\r\n                var pivot = source[left];\r\n                var indexForIterator = left+1;\r\n                while (indexForIterator <= indexForGreaterThan) {\r\n                    var cmp = predicate(source[indexForIterator], pivot);\r\n                    if (cmp < 0) {\r\n                        source.swap(indexForLessThan++, indexForIterator++);\r\n                    }\r\n                    else if (cmp > 0) {\r\n                        source.swap(indexForIterator, indexForGreaterThan--);\r\n                    }\r\n                    else {\r\n                        indexForIterator++;\r\n                    }\r\n                }\r\n                if (left < indexForLessThan-1) {\r\n                    internalQuickSort(left, indexForLessThan-1);\r\n                }\r\n                if (indexForGreaterThan+1 < right) {\r\n                    internalQuickSort(indexForGreaterThan+1, right);\r\n                }\r\n            };\r\n            internalQuickSort(0, this.length-1);\r\n        };\r\n\r\n        /**\r\n            Removes the first element from an array which matches a provided predicate.\r\n             \r\n            @param {array} source The source array from which to remove an element.\r\n            @param {function} predicate The method used to determine element removal.\r\n            @returns {array} The reference to the original array.\r\n        */\r\n        arrays.remove = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            predicate = z.lambda(predicate);\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (predicate(source[i])) {\r\n                    source.splice(i, 1);\r\n                }\r\n            }\r\n            return source;\r\n        };\r\n\r\n        /**\r\n            Removes elements from an array based on a provided predicate.\r\n            Traverses the array backwards, as it modifies the array which is currently being iterated.\r\n             \r\n            @param {array} source The source array.\r\n            @param {function|string} predicate The method or lambda string used to determine element removal.\r\n            @returns {number} The count of removed items.\r\n        */\r\n        arrays.removeAll = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            var removalCount = 0;\r\n            predicate = z.lambda(predicate);\r\n            for (var i = source.length-1; i > -1; i--) {\r\n                if (predicate(source[i])) {\r\n                    source.splice(i, 1);\r\n                    removalCount++;\r\n                }\r\n            }\r\n            return removalCount;\r\n        };\r\n\r\n        /**\r\n            Projects a selected set of elements from an array of objects into a new array of new objects.\r\n            \r\n            @param {array} source The source array.\r\n            @param {(string|function|string[])} selectors A property name, function for selecting properties, or an array of property names.\r\n            @returns {array} An array of objects, containing the properties specified by selectors.\r\n        */\r\n        arrays.select = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var result = [];\r\n            selector = z.lambda(selector);\r\n            for (var i = 0; i < source.length; i++) {\r\n                result.push(selector(source[i]));\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Shuffles an array using the Fisher-Yates algorithm.\r\n            Note that the original array in the provided reference will be shuffled.\r\n\r\n            @param {array} source The source array to be shuffled.\r\n            @returns {array} source The shuffled array.\r\n        */\r\n        arrays.shuffle = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            for (var i = source.length-1; i >= 0; i--) {\r\n                arrays.swap(source, i, Math.floor(Math.random() * i));\r\n            }\r\n            return source; // note that the original array will be shuffled -- return a reference to it anyways\r\n        };\r\n\r\n        /**\r\n            Takes and returns the items of the array\r\n            starting at the provided index.\r\n            \r\n            @param {array} source The source array over which to iterate.\r\n            @param {number} index The index to start at.\r\n            @returns {array} An array containing the taken items.\r\n        */\r\n        arrays.skip = function(/* source, index */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var index = arguments[argsIterator++];\r\n            var result = [];\r\n            if (index < 0) {\r\n                index = 0; // consider logic for negative skips skipping items from the back\r\n            }\r\n            for (var i = 0; i < source.length - index && index <= source.length; i++) {\r\n                result[i] = source[i+index];\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Internal method for assistance with recursively building\r\n            a set of subsets whose values all add up to the specified target.\r\n\r\n            @param {array<number>} remaining The remaining unused values array for which to calculate a set of subsets.\r\n            @param {number} target The target for each subset's sum.\r\n            @param {array<number>} partial The array containing a potential subset of numbers whose sum adds to the target.\r\n            @param {array<array<number>>} successes The reference to the array containing all successfully found subsets.\r\n            @returns {array<array<number>>} The set of subsets.\r\n        */\r\n        function _internalSubsetSum(remaining, target, selector, partial, successes) {\r\n            var s = partial.sum(selector);\r\n            if (s === target) {\r\n                successes.push(partial); // partial is a success!\r\n                return; // found a success - end of path\r\n            }\r\n            if (s > target) {\r\n                return; // too high - bad path\r\n            }\r\n            for (var i = 0; i < remaining.length; i++) {\r\n                var newRemaining = [];\r\n                var n = remaining[i];\r\n                for (var j = i+1; j < remaining.length; j++) {\r\n                    newRemaining.push(remaining[j]);\r\n                }\r\n                var newPartial = partial.deepCopy(); // will this be too inefficient? we could use slice for a shallow copy, if necessary\r\n                newPartial.push(n);\r\n                _internalSubsetSum(newRemaining, target, selector, newPartial, successes);\r\n            }\r\n            return successes;\r\n        }\r\n\r\n        /**\r\n            Builds an array of arrays, notating a set of subsets\r\n            whose values all add up to the specified target.\r\n\r\n            @param {array<number>} source The source array for which to calculate a set of subsets.\r\n            @param {number} target The target for each subset's sum.\r\n            @returns {array<array<number>>} The set of subsets.\r\n        */\r\n        arrays.subsetSum = function(/* source, target, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var target = arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            if (!z.check.isFunction(selector)) {\r\n                selector = z.functions.identity;\r\n                // source = source.select(selector);\r\n            }\r\n            return _internalSubsetSum(source, target, selector, [], []);\r\n        };\r\n\r\n        /**\r\n            Builds a summation of an array of numbers\r\n            or a given numeric property for an array of objects.\r\n            \r\n            @this {array}\r\n            @param {function|string} [selector] The method or lambda string used to select a property name for an array of objects.\r\n            @returns A summation of either the array itself, or the given property.\r\n        */\r\n        arrays.sum = function(/* source, selector */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var selector = arguments[argsIterator++];\r\n            var sum = 0;\r\n            var i;\r\n            if (selector != null) {\r\n                selector = z.lambda(selector);\r\n                for (i = 0; i < source.length; i++) {\r\n                    var selection = selector(source[i]);\r\n                    if (z.check.isNumber(selection)) {\r\n                        sum += selection;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < source.length; i++) {\r\n                    if (z.check.isNumber(source[i])) {\r\n                        sum += (source[i]);\r\n                    }\r\n                }\r\n            }\r\n            return sum;\r\n        };\r\n\r\n        /**\r\n            Swaps two array items located at the provided indices.\r\n            Note that the assertions can be dropped to improve performance.\r\n            \r\n            @this {array}\r\n            @param {number} indexA The first index.\r\n            @param {number} indexB The second index.\r\n            @returns {void}\r\n         */\r\n        arrays.swap = function(/* source, indexA, indexB */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var indexA = arguments[argsIterator++];\r\n            var indexB = arguments[argsIterator++];\r\n            var temp = source[indexA];\r\n            source[indexA] = source[indexB];\r\n            source[indexB] = temp;\r\n        };\r\n\r\n        /**\r\n            Takes the number of provided items from the array,\r\n            starting at the first element.\r\n            \r\n            @this {array}\r\n            @param {number} count The number of items to take.\r\n            @returns {array} An array containing the taken items.\r\n        */\r\n        arrays.take = function(/* source, count */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var count = arguments[argsIterator++];\r\n            var result = [];\r\n            if (count < 0) {\r\n                count = 0; // consider logic to allow negative count to count from the back of the array\r\n            }\r\n            for (var i = 0; i < count && i < source.length; i++) {\r\n                result[i] = source[i];\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Takes items from the array until\r\n            the predicate no longer matches.\r\n            \r\n            @this {array}\r\n            @param {function|string} predicate The method or lambda string used to determine when to halt collection from the source array.\r\n            @returns {array} An array containing the taken items.\r\n        */\r\n        arrays.takeWhile = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            var result = [];\r\n            predicate = z.lambda(predicate);\r\n            for (var i = 0; i < count; i++) {\r\n                if (!predicate(source[i])) break;\r\n                result.push(source[i]);\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Builds an array of objects from the original array which\r\n            contains items that meet the conditions given by the predicate.\r\n\r\n            Note that this is really the same thing as Array.filter.\r\n            \r\n            @this {array}\r\n            @param {function} predicate A predicate used to determine whether or not to take an object on the array.\r\n            @returns {array} A deep copied array of objects which match the predicate.\r\n        */\r\n        arrays.where = function(/* source, predicate */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var predicate = arguments[argsIterator++];\r\n            predicate = z.lambda(predicate);\r\n            var result = [];\r\n            for (var i = 0; i < source.length; i++) {\r\n                if (predicate(source[i], i, source)) {\r\n                    result.push(source[i]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        /**\r\n            Builds a new array by executing a provided method \r\n            with the provided two arrays and placing the result the new array.\r\n            \r\n            @param {arr1} array The first array to use for the zipping method.\r\n            @param {arr2} array The second array to use for the zipping method.\r\n            @param {method} method The method used to execute and return a result using items on both of the original arrays.\r\n            @returns {array} An array with the zipped results.\r\n        */\r\n        arrays.zip = function(/* arr1, arr2, method */) {\r\n            var argsIterator = 0;\r\n            var arr1 = z.getType(this) === z.types.array ? this : arguments[argsIterator++];\r\n            var arr2 = arguments[argsIterator++];\r\n            var method = arguments[argsIterator++];\r\n            method = z.lambda(method);\r\n            var source = this;\r\n            var result = [];\r\n            for (var i = 0; i < source.length; i++) {\r\n                result.push(method(arr1[i], arr2[i]));\r\n            }\r\n            return result;\r\n        };\r\n\r\n\r\n        /**\r\n            Places all array extensions on the provided object or prototype.\r\n\r\n            @param {obj} object The object to be extended with array methods.\r\n        */\r\n        arrays.extendTo = function(obj) {\r\n            z.defineProperty(obj, \"aggregate\", { enumerable: false, writable: true, value: arrays.aggregate });\r\n            z.defineProperty(obj, \"any\", { enumerable: false, writable: true, value: arrays.any });\r\n            z.defineProperty(obj, \"average\", { enumerable: false, writable: true, value: arrays.average });\r\n            z.defineProperty(obj, \"contains\", { enumerable: false, writable: true, value: arrays.contains });\r\n            z.defineProperty(obj, \"count\", { enumerable: false, writable: true, value: arrays.count });\r\n            z.defineProperty(obj, \"deepCopy\", { enumerable: false, writable: true, value: _deepCopy });\r\n            z.defineProperty(obj, \"distinct\", { enumerable: false, writable: true, value: arrays.distinct });\r\n            z.defineProperty(obj, \"equals\", { enumerable: false, writable: true, value: _equals });\r\n            z.defineProperty(obj, \"first\", { enumerable: false, writable: true, value: arrays.first });\r\n            z.defineProperty(obj, \"flatten\", { enumerable: false, writable: true, value: arrays.flatten });\r\n            z.defineProperty(obj, \"innerJoin\", { enumerable: false, writable: true, value: arrays.innerJoin });\r\n            z.defineProperty(obj, \"isEmpty\", { enumerable: false, writable: true, value: arrays.isEmpty });\r\n            z.defineProperty(obj, \"isFull\", { enumerable: false, writable: true, value: arrays.isFull });\r\n            z.defineProperty(obj, \"last\", { enumerable: false, writable: true, value: arrays.last });\r\n            z.defineProperty(obj, \"max\", { enumerable: false, writable: true, value: arrays.max });\r\n            z.defineProperty(obj, \"min\", { enumerable: false, writable: true, value: arrays.min });\r\n            z.defineProperty(obj, \"mutate\", { enumerable: false, writable: true, value: arrays.mutate });\r\n            z.defineProperty(obj, \"orderBy\", { enumerable: false, writable: true, value: arrays.orderBy });\r\n            z.defineProperty(obj, \"quicksort\", { enumerable: false, writable: true, value: arrays.quicksort });\r\n            z.defineProperty(obj, \"quicksort3\", { enumerable: false, writable: true, value: arrays.quicksort3 });\r\n            z.defineProperty(obj, \"remove\", { enumerable: false, writable: true, value: arrays.remove });\r\n            z.defineProperty(obj, \"removeAll\", { enumerable: false, writable: true, value: arrays.removeAll });\r\n            z.defineProperty(obj, \"select\", { enumerable: false, writable: true, value: arrays.select });\r\n            z.defineProperty(obj, \"shuffle\", { enumerable: false, writable: true, value: arrays.shuffle });\r\n            z.defineProperty(obj, \"skip\", { enumerable: false, writable: true, value: arrays.skip });\r\n            z.defineProperty(obj, \"subsetSum\", { enumerable: false, writable: true, value: arrays.subsetSum });\r\n            z.defineProperty(obj, \"sum\", { enumerable: false, writable: true, value: arrays.sum });\r\n            z.defineProperty(obj, \"swap\", { enumerable: false, writable: true, value: arrays.swap });\r\n            z.defineProperty(obj, \"take\", { enumerable: false, writable: true, value: arrays.take });\r\n            z.defineProperty(obj, \"takeWhile\", { enumerable: false, writable: true, value: arrays.takeWhile });\r\n            z.defineProperty(obj, \"where\", { enumerable: false, writable: true, value: arrays.where });\r\n            z.defineProperty(obj, \"zip\", { enumerable: false, writable: true, value: arrays.zip });\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable and non-writable properties\r\n            located on the Array.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initArrays = function(usePrototype) {\r\n            if (!!usePrototype)\r\n                arrays.extendTo(Array.prototype);\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        /*\r\n            AssertionError extension of Error, since certain libraries (eg gulp-mocha)\r\n            expect any assertion errors to be thrown to have a name of 'AssertionError'.\r\n        */\r\n        var AssertionError = function(message) {\r\n            if (!this instanceof AssertionError)\r\n                return new AssertionError(message);\r\n            if (Error && Error.captureStackTrace)\r\n                Error.captureStackTrace(this, this.constructor); // NodeJS style stack trace\r\n            this.name = 'AssertionError';\r\n            this.message = message || 'Unknown AssertionError';\r\n        };\r\n        AssertionError.prototype = Object.create(Error.prototype, {\r\n            constructor: {\r\n                value: AssertionError,\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true\r\n            }\r\n        });\r\n\r\n        /**\r\n            Executes an assertion for a given condition.\r\n            \r\n            @param {boolean|function} condition The item used to determine whether or not an assertion passed.\r\n            @param {string} [message] The overridden message to use when throwing an error. If none is provided, then the condition is used as a message.\r\n            @returns {void}\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var assert = function(condition, message) {\r\n            // var parent = arguments.callee.caller;\r\n            if (z.getType(condition) === z.types.function) {\r\n                if (!condition()) {\r\n                    if (message) throw new Error(message);\r\n                    else {\r\n                        var functionString = condition.toString();\r\n                        var functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\")).trim();\r\n                        throw new AssertionError(\"Assertion failed: \" + functionBody);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!condition) {\r\n                    if(message) throw new AssertionError(message);\r\n                    else        throw new AssertionError(\"Assertion failed: \" + String(condition));\r\n                } // end if (!condition)\r\n            }\r\n        };\r\n\r\n        /**\r\n            Asserts that all of the arguments provided for a method existing.\r\n            \r\n            @param {string} var_args The arguments provided to a method.\r\n            @returns {boolean} True, if the assertion passes.\r\n        */\r\n        var argsNotNull = function() {\r\n            assert(function() { return z.check.argsNotNull.apply(this, arguments); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is not equal to null or undefined.\r\n            \r\n            @param {any} value The value to check for null or undefined values.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the value is equal to null or undefined.\r\n        */\r\n        var exists = function(value) {\r\n            assert(function() { return z.check.exists(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is an array type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isArray = function(value) {\r\n            assert(function() { return z.check.isArray(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a boolean type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isBoolean = function(value) {\r\n            assert(function() { return z.check.isBoolean(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a date type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isDate = function(value) {\r\n            assert(function() { return z.check.isDate(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a function type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isFunction = function(value) {\r\n            assert(function() { return z.check.isFunction(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a non-empty array.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isNonEmptyArray = function(value) {\r\n            assert(function() { return z.check.isNonEmptyArray(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a number type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isNumber = function(value) {\r\n            assert(function() { return z.check.isNumber(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is an object type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isObject = function(value) {\r\n            assert(function() { return z.check.isObject(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a reference type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isReference = function(value) {\r\n            assert(function() { return z.check.isReference(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided arguments are all \r\n            the same type of either arrays, functions, or objects.\r\n            \r\n            @param {...array|object|function} var_args The items to check for smashability.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isSmashable = function(/* ... arguments */) {\r\n            var args = arguments; // keep a pointer, so we can pass them into the anonymous function\r\n            assert(function() { return z.check.isSmashable.apply(undefined, args); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a string type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True if the value is a string, false if not.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isString = function(value) {\r\n            assert(function() { return z.check.isString(value); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a provided type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @param {string} type The name of the type for which to check.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isType = function(value, type) {\r\n            assert(function() { return z.check.isType(value, type); });\r\n        };\r\n\r\n        /**\r\n            Asserts that the provided value is a value (non-reference) type.\r\n            \r\n            @param {any} value The value on which to check the assertion.\r\n            @returns {boolean} True, if the assertion passes.\r\n            @throws {error} An error is thrown if the assertion fails.\r\n        */\r\n        var isValue = function(value) {\r\n            assert(function() { return z.check.isValue(value); });\r\n        };\r\n\r\n\r\n        /**\r\n            A wrapper class used to hold and execute different assertion methods.\r\n\r\n            @class Contains a provided set of assertions.\r\n         */\r\n        var Asserter = (function() {\r\n\r\n            /**\r\n                Creates a new Asserter class.\r\n\r\n                @constructor\r\n                @param {object} logger The interface containing the expected log methods.\r\n                @param {bool} [enableDebugLogging] An override for enabling debug logging on Log class creation.\r\n            */\r\n            function Asserter() {\r\n\r\n                /**\r\n                    Extends a function into an Asserter interface with\r\n                    the pre-determined, privately stored properties,\r\n                    returning it back to the original Asserter() call.\r\n\r\n                    @returns {function} The extended function.\r\n                */\r\n                return (function(newAsserter) {\r\n                    /**\r\n                        The base Asserter function to be returned.\r\n                        Note that the base function can be called\r\n                        as a pass-through method for _assert without\r\n                        needing to directly call LogInterface.log()\r\n\r\n                        @param {any} [x] The item to extend and return to the Asserter class.\r\n                        @returns {any} The extended item.\r\n                    */\r\n                    z.defineProperty(newAsserter, \"argsNotNull\", { get: function() { return argsNotNull; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"exists\", { get: function() { return exists; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isArray\", { get: function() { return isArray; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isBoolean\", { get: function() { return isBoolean; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isDate\", { get: function() { return isDate; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isFunction\", { get: function() { return isFunction; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isNonEmptyArray\", { get: function() { return isNonEmptyArray; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isNumber\", { get: function() { return isNumber; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isObject\", { get: function() { return isObject; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isReference\", { get: function() { return isReference; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isSmashable\", { get: function() { return isSmashable; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isString\", { get: function() { return isString; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isType\", { get: function() { return isType; }, writeable: false });\r\n                    z.defineProperty(newAsserter, \"isValue\", { get: function() { return isValue; }, writeable: false });\r\n                    return newAsserter;\r\n                })(assert);\r\n            }\r\n\r\n            return Asserter;\r\n            \r\n        })();\r\n\r\n        z.classes.Asserter = Asserter;\r\n        z.assert = new z.classes.Asserter(); // add a default Log using the console as the logging interface\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        /**\r\n            Container for all utility checking methods.\r\n            \r\n            @class Contains all utility checking methods.\r\n        */\r\n        var check = function() {};\r\n\r\n        /**\r\n            Checks that all of the arguments provided for a method existing.\r\n            \r\n            @param {string} var_args The arguments provided to a method.\r\n            @returns {boolean} True, if the check passes.\r\n        */\r\n        check.argsNotNull = function() {\r\n            for (var i = 0; i < arguments.length; i++) {\r\n                if (arguments[i] == null) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is not equal to null or undefined.\r\n            \r\n            @param {any} value The value to check for null or undefined values.\r\n            @returns {boolean} True, if the check passes.\r\n            @throws {error} An error is thrown if the value is equal to null or undefined.\r\n        */\r\n        check.exists = function(value) {\r\n            return value != null;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is an array type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isArray = function(value) {\r\n            return z.getType(value) === z.types.array;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a boolean type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isBoolean = function(value) {\r\n            return z.getType(value) === z.types.boolean;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a date type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isDate = function(value) {\r\n            return z.getType(value) === z.types.date;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a function type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isFunction = function(value) {\r\n            return z.getType(value) === z.types.function;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a generator function type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isGeneratorFunction = function(value) {\r\n            return z.getType(value) === z.types.function && value.isGenerator();\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is an iterable type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isIterable = function(value) {\r\n            if (!z.check.exists(value)) return false;\r\n            var iterator = value[z.symbols.iterator] || value.prototype[z.symbols.iterator]; // will this always be on prototype?\r\n            return z.getType(iterator) === z.types.function;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a non-empty array.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isNonEmptyArray = function(value) {\r\n            return (z.check.exists(value) && z.getType(value) === z.types.array && value.length > 0);\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a number type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isNumber = function(value) {\r\n            return !isNaN(value); \r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is an object type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isObject = function(value) {\r\n            return z.getType(value) === z.types.object;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a reference type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isReference = function(value) {\r\n            switch (z.getType(value)) {\r\n                case z.types.array:\r\n                case z.types.date:\r\n                case z.types.function:\r\n                case z.types.generator:\r\n                case z.types.generatorFunction:\r\n                case z.types.object:\r\n                case z.types.regexp:\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        };\r\n\r\n        /**\r\n            Checks that the provided arguments are all \r\n            the same type of either arrays, functions, or objects.\r\n            \r\n            @param {...array|object|function} var_args The items to check for smashability.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isSmashable = function(/* ... arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            if (args.length < 1)\r\n                return false;\r\n            var baseType = z.getType(args[0]);\r\n            if (!(baseType === z.types.array || baseType === z.types.object || baseType === z.types.function))\r\n                return false;\r\n            if (baseType === z.types.function)\r\n                baseType = z.types.object; // allow functions to be smashed onto objects, and vice versa\r\n            for (var i = 1; i < args.length; i++) {\r\n                var targetType = z.getType(args[i]);\r\n                if (targetType === z.types.function)\r\n                    targetType = z.types.object; // allow functions to be smashed onto objects, and vice versa\r\n                if (targetType !== baseType)\r\n                    return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a string type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isString = function(value) {\r\n            return z.getType(value) === z.types.string;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a provided type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @param {string} type The name of the type for which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isType = function(value, type) {\r\n            return z.getType(value) === type;\r\n        };\r\n\r\n        /**\r\n            Checks that the provided value is a value (non-reference) type.\r\n            \r\n            @param {any} value The value on which to check.\r\n            @returns {boolean} True if the check passes, false if not.\r\n        */\r\n        check.isValue = function(value) {\r\n            switch (z.getType(value)) {\r\n                case z.types.boolean:\r\n                case z.types.null: // value or reference?\r\n                case z.types.number:\r\n                case z.types.string:\r\n                case z.types.undefined: // value or reference?\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        };\r\n\r\n        z.check = check;\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        /**\r\n            Executes a conversion for a given source and type.\r\n            \r\n            @param {any} source The item to convert.\r\n            @param {string} toType The type to which to convert.\r\n            @returns {any} The converted source.\r\n            @throws {error} An error is thrown if toType is not a string.\r\n        */\r\n        var convert = function(source, toType) {\r\n            z.assert.isString(toType);\r\n            switch (toType) {\r\n                case z.types.boolean: return toBoolean(source);\r\n                case z.types.date: return toDate(source);\r\n                case z.types.number: return toNumber(source);\r\n            }\r\n        };\r\n\r\n        /**\r\n            Executes a conversion to boolean for a given source.\r\n            \r\n            @param {any} source The item to convert.\r\n            @returns {boolean} The converted source.\r\n        */\r\n        var toBoolean = function(source) {\r\n            if (z.check.exists(source) && z.check.isFunction(source.toBoolean)) {\r\n                return source.toBoolean(); // allow override to be supplied directly on the source object\r\n            }\r\n            switch (z.getType(source)) {\r\n                case z.types.boolean:\r\n                    return source;\r\n                case z.types.string:\r\n                    switch (source.toLowerCase().trim()) {\r\n                        case \"false\":\r\n                        case \"0\":\r\n                        case \"\":\r\n                        case null:\r\n                        case undefined:\r\n                            return false;\r\n                        default:\r\n                            return true;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return !!source;\r\n            }\r\n        };\r\n\r\n        /**\r\n            Executes a conversion to a date for a given source.\r\n            \r\n            @param {any} source The item to convert.\r\n            @returns {date} The converted source.\r\n        */\r\n        var toDate = function(source) {\r\n            if (z.check.exists(source) && z.check.isFunction(source.toDate)) {\r\n                return source.toDate();\r\n            }\r\n            switch (z.getType(source)) {\r\n                case z.types.date:\r\n                    return source;\r\n                case z.types.string:\r\n                    return new Date(Date.parse(source));\r\n                default:\r\n                    return new Date(Date.parse(source.toString()));\r\n            }\r\n        };\r\n\r\n        /**\r\n            Executes a conversion to a number for a given source.\r\n            \r\n            @param {any} source The item to convert.\r\n            @returns {boolean} The converted source.\r\n        */\r\n        var toNumber = function(source) {\r\n            if (z.check.exists(source) && z.check.isFunction(source.toNumber)) {\r\n                return source.toNumber(); // allow override to be supplied directly on the source object\r\n            }\r\n            switch (z.getType(source)) {\r\n                case z.types.number:\r\n                    return source;\r\n                default:\r\n                    return +source;\r\n            }\r\n        };\r\n\r\n        /**\r\n            A wrapper class used to hold and execute different assertion methods.\r\n\r\n            @class Contains a provided set of assertions.\r\n         */\r\n        var Converter = (function() {\r\n\r\n            /**\r\n                Creates a new Asserter class.\r\n\r\n                @constructor\r\n                @param {object} logger The interface containing the expected log methods.\r\n                @param {bool} [enableDebugLogging] An override for enabling debug logging on Log class creation.\r\n            */\r\n            function Converter() {\r\n\r\n                /**\r\n                    Extends a function into an Asserter interface with\r\n                    the pre-determined, privately stored properties,\r\n                    returning it back to the original Asserter() call.\r\n\r\n                    @returns {function} The extended function.\r\n                */\r\n                return (function(newConverter) {\r\n                    /**\r\n                        The base Asserter function to be returned.\r\n                        Note that the base function can be called\r\n                        as a pass-through method for _assert without\r\n                        needing to directly call LogInterface.log()\r\n\r\n                        @param {any} [x] The item to extend and return to the Asserter class.\r\n                        @returns {any} The extended item.\r\n                    */\r\n                    z.defineProperty(newConverter, \"toBoolean\", { get: function() { return toBoolean; }, writeable: false });\r\n                    z.defineProperty(newConverter, \"toDate\", { get: function() { return toDate; }, writeable: false });\r\n                    z.defineProperty(newConverter, \"toNumber\", { get: function() { return toNumber; }, writeable: false });\r\n                    return newConverter;\r\n                })(convert);\r\n            }\r\n\r\n            return Converter;\r\n            \r\n        })();\r\n\r\n        z.classes.Converter = Converter;\r\n        z.convert = new z.classes.Converter();\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        /**\r\n            A wrapper class used to register and execute custom named events.\r\n\r\n            @class Contains an internal list of registered events.\r\n        */\r\n        var Events = (function() {\r\n\r\n            /**\r\n                Creates a new Events class.\r\n\r\n                @constructor\r\n            */\r\n            function Events() {\r\n\r\n                var _eventList = [];\r\n\r\n                /**\r\n                    Calls any registered functions under the given event name,\r\n                    passing any additional provided arguments to those functions.\r\n\r\n                    @param {string} eventName The name of the event to emit.\r\n                    @param {...any} var_args The arguments to pass to each of the registered events.\r\n                    @returns {void}\r\n                */\r\n                var emit = function(eventName) {\r\n                    var events = _eventList[eventName];\r\n                    if (z.check.exists(events)) {\r\n                        for (var i = 0; i < events.length; i++) {\r\n                            var ev = events[i];\r\n                            if (z.check.exists(ev.func)) {\r\n                                ev.func.apply(null, Array.prototype.slice.call(arguments, 1));\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                /**\r\n                    Clears all registered functions for a given event name.\r\n                    passing any additional provided arguments to those functions.\r\n\r\n                    @param {string} eventName The name of the event for which to clear events.\r\n                    @returns {void}\r\n                */\r\n                var clear = function(eventName) {\r\n                    z.check.exists(eventName);\r\n                    _eventList[eventName] = null;\r\n                };\r\n\r\n                /**\r\n                    Registers a function for a provided event name.\r\n                    passing any additional provided arguments to those functions.\r\n\r\n                    @param {string} eventName The name of the event on which to register the function.\r\n                    @param {function} eventFunc The function to register for the event.\r\n                    @returns {function} The function used to deregister the event which was just registered.\r\n                */\r\n                var on = function(eventName, eventFunc) {\r\n                    z.check.exists(eventName);\r\n                    z.check.isFunction(eventFunc);\r\n                    var eventList = (_eventList[eventName] || (_eventList[eventName] = []));\r\n                    var currentEvent = {\r\n                        func: eventFunc\r\n                    };\r\n                    eventList.push(currentEvent);\r\n                    var deregister = function() {\r\n                        _eventList[eventName].removeAll(function(x) { return x === currentEvent; }); // remove only by reference\r\n                    };\r\n                    return deregister;\r\n                };\r\n\r\n                /**\r\n                    Extends an object into a events interface with\r\n                    the pre-determined, privately stored properties,\r\n                    returning it back to the original Events() call.\r\n\r\n                    @param {object} eventsObj The object to extend with Events properties.\r\n                    @returns {object} The extended object.\r\n                */\r\n                return (function(eventsObj) {\r\n                    z.defineProperty(eventsObj, \"emit\", { get: function() { return emit; }, writeable: false });\r\n                    z.defineProperty(eventsObj, \"clear\", { get: function() { return clear; }, writeable: false });\r\n                    z.defineProperty(eventsObj, \"on\", { get: function() { return on; }, writeable: false });\r\n                    return eventsObj;\r\n                })({});\r\n\r\n            }\r\n\r\n            return Events;\r\n\r\n        })();\r\n\r\n        z.classes.Events = Events;\r\n        z.events = new z.classes.Events();\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var functions = z.functions = z.functions || {}; // note that z.functions is already defined with defaults in base.js\r\n\r\n        /**\r\n            Curries a function, allowing it to accept\r\n            partial argument lists at differing times.\r\n\r\n            @source {function} The function to curry.\r\n            @returns The original curried function.\r\n        */\r\n        functions.curry = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.function ? this : arguments[argsIterator++];\r\n            z.assert.isFunction(source);\r\n            var sourceArgs = Array.prototype.slice.call(arguments);\r\n            var sourceArgsLength = source.length;\r\n\r\n            function curried(args) {\r\n                if (args.length >= sourceArgsLength) {\r\n                    return source.apply(null, args);\r\n                }\r\n                return function() {\r\n                    return curried(args.concat(Array.prototype.slice.call(arguments)));\r\n                };\r\n            }\r\n            return curried(sourceArgs);\r\n        };\r\n        \r\n        /**\r\n            Creates a deep copy of an original function.\r\n            To be used for the function.prototype extension.\r\n            \r\n            @this {function}\r\n            @returns A deep copy of the original function.\r\n        */\r\n        var _deepCopy = function() {\r\n            return z.deepCopy(this);\r\n        };\r\n\r\n        /**\r\n            Defines a property on this function.\r\n            To be used for the function.prototype extension.\r\n            \r\n            @this {function}\r\n            @param {string} name The name of the property.\r\n            @param {any} prop The property to add.\r\n            @returns {void}\r\n         */\r\n        var _defineProperty = function(name, propertyDefinition) {\r\n            return z.defineProperty(this, name, propertyDefinition);\r\n        };\r\n\r\n        /**\r\n            Determines the equality of two functions.\r\n            To be used for the function.prototype extension.\r\n            \r\n            @this {function}\r\n            @param {function} func2 The second function to compare.\r\n            @returns True if both functions contain equal items, false if not.\r\n         */\r\n        var _equals = function(func2) {\r\n            return z.equals(this, func2);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided function arguments into the first function provided.\r\n            To be used for the function.prototype extension.\r\n\r\n            @this {function}\r\n            @param {...function} var_args The tail functions to smash.\r\n            @returns {any} A deep copy of the extended functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not extendable.\r\n        */\r\n        var _extend = function(/* ...arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.functions.extend.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided function arguments into the first function provided.\r\n            \r\n            @param {...function} var_args The tail functions to use for extension.\r\n            @returns {any} A deep copy of the extended functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not extendable.\r\n        */\r\n        functions.extend = function(/* ...arguments */) {\r\n            return z.extend.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Returns the argument names for the function as an array.\r\n\r\n            @param {function} source The function for which to collect arguments.\r\n            @returns {array} An array containing any named arguments.\r\n        */\r\n        functions.getArgumentNames = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.function ? this : arguments[argsIterator++];\r\n            z.assert.isFunction(source);\r\n            var s = source.toString();\r\n            var args = s.substring(s.indexOf(\"(\")+1, s.indexOf(\")\")).trim().split(\",\");\r\n            args.map(function(val, index, arr) {\r\n                arr[index] = val.trim().replace(/(\\n)?\\/\\*\\*\\//g, \"\"); // new Function() will append /**/ to argument lists, sometimes with a new line\r\n            });\r\n            return args;\r\n        };\r\n\r\n        /**\r\n            Returns the body of the provided function as a string.\r\n\r\n            @param {function} source The function from which to collect the body.\r\n            @returns {string} A string representation of the function body.\r\n        */\r\n        functions.getBody = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.function ? this : arguments[argsIterator++];\r\n            z.assert.isFunction(source);\r\n            var s = source.toString();\r\n            return s.toString().substring(s.indexOf(\"{\")+1, s.indexOf(\"}\")).trim();\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided function arguments into a single function.\r\n            To be used for the function.prototype extension.\r\n\r\n            @this {function}\r\n            @param {...function|object} var_args The tail functions to smash.\r\n            @returns {any} A deep copy of the smashed functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not functions.\r\n        */\r\n        var _smash = function(/* ...arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.functions.smash.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided function arguments into a single function.\r\n            \r\n            @param {...function|object} var_args The tail functions to smash.\r\n            @returns {any} A deep copy of the smashed functions.\r\n            @throws {error} An error is thrown if any of the provided arguments are not functions.\r\n        */\r\n        functions.smash = function(/* ...arguments */) {\r\n            return z.smash.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Places all function extensions on the provided object or prototype.\r\n\r\n            @param {obj} object The object to be extended with function methods.\r\n        */\r\n        functions.extendTo = function(obj) {\r\n            z.defineProperty(obj, \"curry\", { enumerable: false, writable: true, value: functions.curry });\r\n            z.defineProperty(obj, \"deepCopy\", { enumerable: false, writable: true, value: _deepCopy });\r\n            z.defineProperty(obj, \"defineProperty\", { enumerable: false, writable: true, value: _defineProperty });\r\n            z.defineProperty(obj, \"equals\", { enumerable: false, writable: true, value: _equals });\r\n            z.defineProperty(obj, \"extend\", { enumerable: false, writable: true, value: _extend });\r\n            z.defineProperty(obj, \"getArgumentNames\", { enumerable: false, writable: true, value: functions.getArgumentNames });\r\n            z.defineProperty(obj, \"getBody\", { enumerable: false, writable: true, value: functions.getBody });\r\n            z.defineProperty(obj, \"smash\", { enumerable: false, writable: true, value: _smash });\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable and non-writable properties\r\n            located on the function.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initFunctions = function(usePrototype) {\r\n            if (!!usePrototype)\r\n                functions.extendTo(Function.prototype);\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n\r\n    function factory(z) {\r\n\r\n        /**\r\n            A method used by the location.parameters property which builds the \r\n            window.location.href query parameters into an object containing key value pairs.\r\n\r\n            @returns {object} The object containing query parameter key value pairs.\r\n        */\r\n        var _regexPlus = /\\+/g; // define once\r\n        var getParameters = function() {\r\n            var params = {};\r\n            if (typeof window !== 'undefined') {\r\n                var href = window.location.href;\r\n                var indexOfQueries = href.indexOf(\"?\");\r\n                if (indexOfQueries > -1) {\r\n                    var queries = href.substring(indexOfQueries+1).split(\"&\");\r\n                    for (var i = 0; i < queries.length; i++) {\r\n                        var query = queries[i].split(\"=\");\r\n                        if (query.length !== 2) continue;\r\n                        params[query[0]] = decodeURIComponent(query[1].replace(_regexPlus, \" \"));\r\n                    }\r\n                }\r\n            }\r\n            return params;\r\n        };\r\n\r\n        /**\r\n            A method used by the location.locale property which collects the locale from\r\n            either the querystring parameters, or the navigator language and userLanguage properties.\r\n\r\n            @returns {string} A string representation of the current locale.\r\n        */\r\n        var getLocale = function() {\r\n            // note: \"this\" should be a pointer to the locationObj defined below\r\n            return this.parameters.locale || navigator.language || navigator.userLanguage;\r\n        };\r\n\r\n        /**\r\n            An interface class used with the window.location object.\r\n            Note that the provided log interface is expected to contain at least\r\n            a debug, error, info, log, and warn method.\r\n\r\n            @class Contains a window.location interface.\r\n        */\r\n        var location = (function(locationObj) {\r\n            z.defineProperty(locationObj, \"parameters\", { get: function() { return getParameters(); }, writeable: false });\r\n            z.defineProperty(locationObj, \"locale\", { get: function() { return getLocale.call(this); }, writeable: false });\r\n            return locationObj;\r\n        })({});\r\n\r\n        z.location = location;\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        var data = {\r\n            expectedMethods: [\r\n                \"log\"\r\n                // \"debug\"\r\n                // , \"error\"\r\n                // , \"info\"\r\n                // , \"log\"\r\n                // , \"warn\"\r\n            ]\r\n        };\r\n\r\n        /**\r\n            An internal helper function used to determine\r\n            whether or not the provided logger object\r\n            is a proper interface for the Log class.\r\n        \r\n            @param {object} logger The log interface to check for expected methods\r\n        */\r\n        var verifyLoggerInterface = function(logger) {\r\n            z.assert.exists(logger);\r\n            for (var i = 0; i < data.expectedMethods.length; i++) {\r\n                var method = data.expectedMethods[i];\r\n                z.assert.isFunction(logger[method]);\r\n            }\r\n        };\r\n\r\n        /**\r\n            Helper method used to binds the LogInterfaces's internal interface\r\n            to the provided external logger interface methods.\r\n\r\n            @param {object} loggerToBind The interface containing the expected log methods.\r\n            @param {object} newLogInterface The object reference to the LogInterface's internal interface.\r\n            @returns {void}\r\n        */\r\n        var bindLoggers = function(loggerToBind, newLogInterface) {\r\n            verifyLoggerInterface(loggerToBind);\r\n            newLogInterface.log = loggerToBind.log.bind(loggerToBind);\r\n\r\n            // fall back to using the \"log\" method \r\n            newLogInterface.debug = z.check.exists(loggerToBind.debug) ? loggerToBind.debug.bind(loggerToBind) : loggerToBind.log.bind(loggerToBind);\r\n            newLogInterface.error = z.check.exists(loggerToBind.error) ? loggerToBind.error.bind(loggerToBind) : loggerToBind.log.bind(loggerToBind);\r\n            newLogInterface.info = z.check.exists(loggerToBind.info) ? loggerToBind.info.bind(loggerToBind) : loggerToBind.log.bind(loggerToBind);\r\n            newLogInterface.warn = z.check.exists(loggerToBind.warn) ? loggerToBind.warn.bind(loggerToBind) : loggerToBind.log.bind(loggerToBind);\r\n        };\r\n\r\n        /**\r\n            A wrapper class used to hold and execute different logging interfaces.\r\n            Note that the provided log interface is expected to contain at least\r\n            a debug, error, info, log, and warn method.\r\n\r\n            @class Contains a provided logging interface.\r\n         */\r\n        var LogInterface = (function() {\r\n\r\n            /**\r\n                Creates a new Log class.\r\n\r\n                @constructor\r\n                @param {object} logger The interface containing the expected log methods.\r\n                @param {bool} [enableDebugLogging] An override for enabling debug logging on Log class creation.\r\n            */\r\n            function LogInterface(logger, enableDebugLogging) {\r\n\r\n                var _internalLogInterface = {};\r\n\r\n                /**\r\n                    Sets the use debug logging flag to the provided boolean.\r\n\r\n                    @param {boolean} useDebugLogging The boolean used to set the debug logging flag.\r\n                    @returns {void}\r\n                */\r\n                var setDebugLogging = function(useDebugLogging) {\r\n                    if (z.getType(useDebugLogging) === z.types.string) {\r\n                        useDebugLogging = (function(str) {\r\n                            switch (str.toLowerCase().trim()) {\r\n                                case \"false\":\r\n                                case \"0\":\r\n                                case \"\":\r\n                                case null:\r\n                                case undefined:\r\n                                    return false;\r\n                                default:\r\n                                    return true;\r\n                            }\r\n                        })(useDebugLogging);\r\n                    }\r\n                    _internalLogInterface.useDebugLogging = !!useDebugLogging;\r\n                };\r\n\r\n                /**\r\n                    Sets the already created log object\r\n                    to the newly provided logger interface.\r\n\r\n                    Note that method is also immediately executed\r\n                    to initialize the provided logger interface.\r\n                    \r\n                    @param {object} newLogger The new logger interface.\r\n                    @returns {void}\r\n                */\r\n                var setLogger = function(newLogger) {\r\n                    bindLoggers(newLogger, _internalLogInterface);\r\n                    setDebugLogging(enableDebugLogging != null ? enableDebugLogging : (z.location ? z.location.parameters.debug : false));\r\n                };\r\n                setLogger(logger);\r\n\r\n                /**\r\n                    Extends a function into a log interface with\r\n                    the pre-determined, privately stored properties,\r\n                    returning it back to the original Log() call.\r\n\r\n                    @returns {function} The extended function.\r\n                */\r\n                return (function(newLog) {\r\n                    /**\r\n                        The base LogInterface function to be returned.\r\n                        Note that the base function can be called\r\n                        as a pass-through method for the _log without\r\n                        needing to directly call LogInterface.log()\r\n\r\n                        Note: Using this method seems a LOT safer,\r\n                        and prevents _log from containing a self-reference.\r\n                        The downside is that the console call will be recorded \r\n                        as coming from this location in log.js,\r\n                        instead of the util.log() line in client code.\r\n\r\n                        @param {any} [x] The item to pass to the LogInterface.log() function.\r\n                        @returns {any} The extended item.\r\n                    */\r\n                    // var newLog = function(x) {\r\n                    //     _log(x); // default a LogInterface(x) call to use _log(x)\r\n                    // };\r\n\r\n                    z.defineProperty(newLog, \"debug\", {\r\n                        get: function() { \r\n                            if (_internalLogInterface.useDebugLogging) {\r\n                                return _internalLogInterface.debug;\r\n                            }\r\n                            else {\r\n                                return z.functions.empty;\r\n                            }\r\n                        },\r\n                        writeable: false\r\n                    });\r\n                    z.defineProperty(newLog, \"error\", { get: function() { return _internalLogInterface.error; }, writeable: false });\r\n                    z.defineProperty(newLog, \"info\", { get: function() { return _internalLogInterface.info; }, writeable: false });\r\n                    z.defineProperty(newLog, \"log\", { get: function() { return _internalLogInterface.log; }, writeable: false });\r\n                    z.defineProperty(newLog, \"warn\", { get: function() { return _internalLogInterface.warn; }, writeable: false });\r\n                    z.defineProperty(newLog, \"setDebugLogging\", { get: function() { return setDebugLogging; }, writeable: false });\r\n                    z.defineProperty(newLog, \"setLogger\", { get: function() { return setLogger; }, writeable: false });\r\n                    return newLog;\r\n                })(_internalLogInterface.log); // note these shenanigans -- seems dangerous, and _log will contain a self-reference\r\n            }\r\n\r\n            return LogInterface;\r\n            \r\n        })();\r\n\r\n        /**\r\n            Initializes a logger interface provided by the setup object.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initLogger = function(defaultLogger) {\r\n            if (z.check.exists(defaultLogger)) {\r\n                z.log = new z.classes.LogInterface(defaultLogger);\r\n            }\r\n        };\r\n\r\n        z.classes.LogInterface = LogInterface;\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var numbers = z.numbers = {};\r\n\r\n        /**\r\n            Calculates and returns the factors for the provided integer.\r\n            \r\n            @param {integer} source The original integer.\r\n            @returns An array containing the divisors for the integer.\r\n        */\r\n        numbers.factors = function(/* source */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.number ? this : arguments[argsIterator++];\r\n            z.assert.isNumber(source);\r\n            var small = [];\r\n            var large = [];\r\n            for (var i = 1; i <= Math.floor(Math.sqrt(source)); i++) {\r\n                if (source % i === 0) {\r\n                    small.push(i);\r\n                    if (source / i !== i) {\r\n                        large.push(source / i);\r\n                    }\r\n                }\r\n            }\r\n            return small.concat(large.reverse()); // note: push and reverse is anywhere from 2x-54x faster than using unshift\r\n        };\r\n\r\n        /**\r\n            Rounds the provided number to the nearest provided step.\r\n            \r\n            @param {number} source The original number.\r\n            @param {number} roundBy The step to round by.\r\n            @returns {number}\r\n        */\r\n        numbers.round = function(/* source, roundBy, direction */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.number ? this : arguments[argsIterator++];\r\n            var roundBy = arguments[argsIterator++] || 1;\r\n            var direction = arguments[argsIterator++];\r\n            z.assert.isNumber(source);\r\n            if (direction) {\r\n                direction = direction.toString().toLowerCase();\r\n                if (direction === 'down') {\r\n                    return z.numbers.roundDown(source, roundBy);\r\n                }\r\n                else if (direction === 'up') {\r\n                    return z.numbers.roundUp(source, roundBy);\r\n                }\r\n            }\r\n            return Math.round(source / roundBy) * roundBy;\r\n        };\r\n\r\n        /**\r\n            Rounds the provided number down to the nearest provided step.\r\n            \r\n            @param {number} source The original number.\r\n            @param {number} roundBy The step to round by.\r\n            @returns {number} \r\n        */\r\n        numbers.roundDown = function(/* source, roundBy */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.number ? this : arguments[argsIterator++];\r\n            var roundBy = arguments[argsIterator++] || 1;\r\n            z.assert.isNumber(source);\r\n            return Math.floor(source / roundBy) * roundBy;\r\n        };\r\n\r\n        /**\r\n            Rounds the provided number up to the nearest provided step.\r\n            \r\n            @param {number} source The original number.\r\n            @param {number} roundBy The step to round by.\r\n            @returns {number} \r\n        */\r\n        numbers.roundUp = function(/* source, roundBy */) {\r\n            var argsIterator = 0;\r\n            var source = z.getType(this) === z.types.number ? this : arguments[argsIterator++];\r\n            var roundBy = arguments[argsIterator++] || 1;\r\n            z.assert.isNumber(source);\r\n            return Math.ceil(source / roundBy) * roundBy;\r\n        };\r\n\r\n        /**\r\n            Places all number extensions on the provided object or prototype.\r\n\r\n            @param {obj} object The object to be extended with number methods.\r\n        */\r\n        numbers.extendTo = function(obj) {\r\n            z.defineProperty(obj, \"factors\", { enumerable: false, writable: true, value: z.numbers.factors });\r\n            z.defineProperty(obj, \"round\", { enumerable: false, writable: true, value: z.numbers.round });\r\n            z.defineProperty(obj, \"roundDown\", { enumerable: false, writable: true, value: z.numbers.roundDown });\r\n            z.defineProperty(obj, \"roundUp\", { enumerable: false, writable: true, value: z.numbers.roundUp });\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable and non-writable properties\r\n            located on the Number.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initNumbers = function(usePrototype) {\r\n            if (!!usePrototype)\r\n                numbers.extendTo(Number.prototype);\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        var objects = z.objects = {};\r\n        \r\n        /**\r\n            Creates a deep copy of an original object.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @returns A deep copy of the original object.\r\n         */\r\n        var _deepCopy = function() {\r\n            return z.deepCopy(this);\r\n        };\r\n\r\n        /**\r\n            Defines a property on this object.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @param {string} name The name of the property.\r\n            @param {any} prop The property to add.\r\n            @returns {void}\r\n         */\r\n        var _defineProperty = function(name, propertyDefinition) {\r\n            return z.defineProperty(this, name, propertyDefinition);\r\n        };\r\n\r\n        /**\r\n            Determines the equality of two objects.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @param {object} obj2 The second object to compare.\r\n            @returns True if both objects contain equal items, false if not.\r\n         */\r\n        var _equals = function(obj2) {\r\n            return z.equals(this, obj2);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided object arguments into the first object provided.\r\n            To be used for the Object.prototype extension.\r\n\r\n            @this {object}\r\n            @param {...object} var_args The tail objects to smash.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        var _extend = function(/* arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.objects.extend.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Extends the properties on the provided object arguments into the first object provided.\r\n            \r\n            @param {...object} var_args The tail objects to use for extension.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        objects.extend = function(/* arguments */) {\r\n            return z.extend.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Determines if an object is empty.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @this {object}\r\n            @returns True if the object does contain any properties, false if not.\r\n         */\r\n        var _isEmpty = function() {\r\n            return z.objects.isEmpty(this);\r\n        };\r\n\r\n        /**\r\n            Determines if an object is empty.\r\n            To be used for the Object.prototype extension.\r\n            \r\n            @param {object} obj The object to check for emptiness.\r\n            @returns True if the object does contain any properties, false if not.\r\n         */\r\n        objects.isEmpty = function(obj) {\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop))\r\n                    return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided object arguments into a single object.\r\n            To be used for the Object.prototype extension.\r\n\r\n            @this {object}\r\n            @param {...object} var_args The tail objects to smash.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        var _smash = function(/* arguments */) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            args.unshift(this);\r\n            return z.objects.smash.apply(null, args);\r\n        };\r\n\r\n        /**\r\n            Smashes the properties on the provided object arguments into a single object.\r\n            \r\n            @param {...object} var_args The tail objects to smash.\r\n            @returns {any} A deep copy of the smashed objects.\r\n            @throws {error} An error is thrown if any of the provided arguments are not objects.\r\n        */\r\n        objects.smash = function(/* arguments */) {\r\n            return z.smash.apply(null, arguments);\r\n        };\r\n\r\n        /**\r\n            Places all object extensions on the provided object or prototype.\r\n\r\n            @param {obj} object The object to be extended with object methods.\r\n        */\r\n        objects.extendTo = function(obj) {\r\n            z.defineProperty(obj, \"deepCopy\", { enumerable: false, writable: true, value: _deepCopy });\r\n            z.defineProperty(obj, \"defineProperty\", { enumerable: false, writable: true, value: _defineProperty });\r\n            z.defineProperty(obj, \"equals\", { enumerable: false, writable: true, value: _equals });\r\n            z.defineProperty(obj, \"extend\", { enumerable: false, writable: true, value: _extend });\r\n            z.defineProperty(obj, \"isEmpty\", { enumerable: false, writable: true, value: _isEmpty });\r\n            z.defineProperty(obj, \"smash\", { enumerable: false, writable: true, value: _smash });\r\n        };\r\n\r\n        /**\r\n            Initializes all pre-defined methods\r\n            as non-enumerable but writable properties\r\n            located on the Object.prototype.\r\n            \r\n            @returns {void}\r\n        */\r\n        z.setup.initObjects = function(usePrototype) {\r\n            if (!!usePrototype)\r\n                objects.extendTo(Object.prototype);\r\n        };\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());","/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n    \"use strict\";\r\n    function factory(z) {\r\n\r\n        z.classes = z.classes || {};\r\n\r\n        /**\r\n            A class wrapper to contain a stack of stopwatches.\r\n            \r\n            @class Represents a stack of currently executing tasks.\r\n        */\r\n        var StopwatchStack = (function() {\r\n\r\n            /**\r\n                @constructor Initializes a new instance of the StopwatchStack class.\r\n            */\r\n            function StopwatchStack() {\r\n\r\n                var _stopwatchStack = [];\r\n\r\n                /**\r\n                    Creates and pushes a new StopwatchWrapper onto the task\r\n                    which contains the given taskDescription.\r\n                \r\n                    @param {string} taskDescription The description for the task to be timed.\r\n                    @returns {void}\r\n                */ \r\n                var _push = function(taskDescription) {\r\n                    _stopwatchStack.push(new StopwatchWrapper(taskDescription));\r\n                };\r\n\r\n                /**\r\n                    Pops the topmost executing StopwatchWrapper from the stack,\r\n                    which in turn will log the execution time using util.log.\r\n                 \r\n                    @param {string} taskDescription The description for the task to be timed.\r\n                    @returns {void}\r\n                */\r\n                var _pop = function() {\r\n                    if (_stopwatchStack.length > 0)\r\n                        return _stopwatchStack.pop().stop();\r\n                };\r\n\r\n                return (function(swObj) {\r\n                    z.defineProperty(swObj, \"push\", { get: function() { return _push; }, writeable: false });\r\n                    z.defineProperty(swObj, \"pop\", { get: function() { return _pop; }, writeable: false });\r\n                    return swObj;\r\n                })({});\r\n            }\r\n\r\n            return StopwatchStack;\r\n\r\n        })();\r\n\r\n        /**\r\n            Creates a new StopwatchWrapper, designed to wrap\r\n            the existing StopWatch class with a task description\r\n            and a logging functionality.\r\n\r\n            Used to keep the Stopwatch class clean,\r\n            so it may be implemented without\r\n            automated logging if necessary.\r\n\r\n            @class Represents a currently executing task.\r\n        */\r\n        function StopwatchWrapper(taskDescription) {\r\n            var sw = new Stopwatch();\r\n            var taskDesc = taskDescription || \"\";\r\n\r\n            this.stop = function() {\r\n                var duration = sw.stop();\r\n                z.log.debug(taskDesc + \" took: \" + duration + \" ms\");\r\n                return duration;\r\n            };\r\n            \r\n            sw.start();\r\n        }\r\n\r\n        /**\r\n            Creates a new Stopwatch.\r\n            \r\n            @class Represents a timer.\r\n        */\r\n        function Stopwatch() {\r\n            var _startTime = null;\r\n            var _stopTime = null;\r\n            var _running = false;\r\n\r\n            /**\r\n                Starts the stopwatch.\r\n                \r\n                @returns {void}\r\n            */\r\n            this.start = function() {\r\n                if (!_running) {\r\n                    _stopTime = null;\r\n                    _running = true;\r\n                    _startTime = new Date().getTime();\r\n                }\r\n            };\r\n\r\n            /**\r\n                Stops the stopwatch.\r\n                \r\n                @returns {void}\r\n            */\r\n            this.stop = function() {\r\n                if(_running) {\r\n                    _stopTime = new Date().getTime();\r\n                    _running = false;\r\n                }\r\n                return this.duration();\r\n            };\r\n\r\n            /**\r\n                Collects the execution duration for the stopwatch.\r\n                \r\n                @returns {number} The duration of the timer in milliseconds.\r\n            */\r\n            this.duration = function() {\r\n                if (!_running)\r\n                    return (_stopTime - _startTime);\r\n                else\r\n                    return (new Date().getTime() - _startTime);\r\n            };\r\n\r\n            /**\r\n                Resets the stopwatch to the initialized state. the execution duration for the stopwatch.\r\n                \r\n                @returns {void}\r\n            */\r\n            this.reset = function() {\r\n                _running = false;\r\n                _startTime = null;\r\n                _stopTime = null;\r\n            };\r\n        }\r\n\r\n        z.classes.StopwatchStack = StopwatchStack;\r\n        z.classes.StopwatchWrapper = StopwatchWrapper;\r\n        z.classes.Stopwatch = Stopwatch;\r\n        z.sw = new z.classes.StopwatchStack();\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}()); "],"sourceRoot":"/source/"}
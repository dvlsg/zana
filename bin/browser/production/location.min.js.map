{"version":3,"sources":["location.js"],"names":["factory","z","_regexPlus","getParameters","params","window","href","location","indexOfQueries","indexOf","queries","substring","split","i","length","query","decodeURIComponent","replace","getLocale","this","parameters","locale","navigator","language","userLanguage","locationObj","defineProperty","get","writeable","call","root","global","define","amd","module","exports"],"mappings":"CAME,WAEE,QAASA,GAAQC,GAQb,GAAIC,GAAa,MACbC,EAAgB,WAChB,GAAIC,KACJ,IAAsB,mBAAXC,QAAwB,CAC/B,GAAIC,GAAOD,OAAOE,SAASD,KACvBE,EAAiBF,EAAKG,QAAQ,IAClC,IAAID,EAAiB,GAEjB,IAAK,GADDE,GAAUJ,EAAKK,UAAUH,EAAe,GAAGI,MAAM,KAC5CC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAK,CACrC,GAAIE,GAAQL,EAAQG,GAAGD,MAAM,IACR,KAAjBG,EAAMD,SACVV,EAAOW,EAAM,IAAMC,mBAAmBD,EAAM,GAAGE,QAAQf,EAAY,QAI/E,MAAOE,IASPc,EAAY,WAEZ,MAAOC,MAAKC,WAAWC,QAAUC,UAAUC,UAAYD,UAAUE,cAUjEjB,EAAW,SAAUkB,GAGrB,MAFAxB,GAAEyB,eAAeD,EAAa,cAAgBE,IAAK,WAAa,MAAOxB,MAAoByB,WAAW,IACtG3B,EAAEyB,eAAeD,EAAa,UAAYE,IAAK,WAAa,MAAOT,GAAUW,KAAKV,OAAUS,WAAW,IAChGH,MAGXxB,GAAEM,SAAWA,EAMjB,GAAIuB,GACkB,mBAAXzB,QACHA,OACqB,mBAAX0B,QACNA,OACEZ,IAEQ,oBAAXa,SAAgD,mBAAfA,QAAOC,KAE/CD,OAAO,WAAa,MAAOhC,KAC3B8B,EAAK7B,EAAIA,GAEc,mBAAXiC,QACkB,mBAAnBA,QAAOC,UACdD,OAAOC,QAAUnC,GAGE,mBAAX8B,GAAK7B,GAEjBD,EAAQ8B,EAAK7B","file":"location.min.js","sourcesContent":["/*\r\n    @license\r\n    Copyright (C) 2014 Dave Lesage\r\n    License: MIT\r\n    See license.txt for full license text.\r\n*/\r\n;(function(undefined) {\r\n\r\n    function factory(z) {\r\n\r\n        /**\r\n            A method used by the location.parameters property which builds the \r\n            window.location.href query parameters into an object containing key value pairs.\r\n\r\n            @returns {object} The object containing query parameter key value pairs.\r\n        */\r\n        var _regexPlus = /\\+/g; // define once\r\n        var getParameters = function() {\r\n            var params = {};\r\n            if (typeof window !== 'undefined') {\r\n                var href = window.location.href;\r\n                var indexOfQueries = href.indexOf(\"?\");\r\n                if (indexOfQueries > -1) {\r\n                    var queries = href.substring(indexOfQueries+1).split(\"&\");\r\n                    for (var i = 0; i < queries.length; i++) {\r\n                        var query = queries[i].split(\"=\");\r\n                        if (query.length !== 2) continue;\r\n                        params[query[0]] = decodeURIComponent(query[1].replace(_regexPlus, \" \"));\r\n                    }\r\n                }\r\n            }\r\n            return params;\r\n        };\r\n\r\n        /**\r\n            A method used by the location.locale property which collects the locale from\r\n            either the querystring parameters, or the navigator language and userLanguage properties.\r\n\r\n            @returns {string} A string representation of the current locale.\r\n        */\r\n        var getLocale = function() {\r\n            // note: \"this\" should be a pointer to the locationObj defined below\r\n            return this.parameters.locale || navigator.language || navigator.userLanguage;\r\n        };\r\n\r\n        /**\r\n            An interface class used with the window.location object.\r\n            Note that the provided log interface is expected to contain at least\r\n            a debug, error, info, log, and warn method.\r\n\r\n            @class Contains a window.location interface.\r\n        */\r\n        var location = (function(locationObj) {\r\n            z.defineProperty(locationObj, \"parameters\", { get: function() { return getParameters(); }, writeable: false });\r\n            z.defineProperty(locationObj, \"locale\", { get: function() { return getLocale.call(this); }, writeable: false });\r\n            return locationObj;\r\n        })({});\r\n\r\n        z.location = location;\r\n    }\r\n\r\n    /**\r\n        Locate root, and determine how to use the factory method.\r\n    */\r\n    var root = (\r\n        typeof window !== 'undefined' ?\r\n            window\r\n            :  typeof global !== 'undefined' ?\r\n                global \r\n                : this\r\n    );\r\n    if (typeof define !== 'undefined' && typeof define.amd !== 'undefined') {\r\n        // define.amd exists\r\n        define(function() { return factory; });\r\n        root.z = z; // expose to root in case require() is not being used to load zana\r\n    }\r\n    else if (typeof module !== 'undefined') {\r\n        if (typeof module.exports !== 'undefined') {\r\n            module.exports = factory;\r\n        }\r\n    }\r\n    else if (typeof root.z !== 'undefined') {\r\n        // pass root.z to the factory\r\n        factory(root.z);\r\n    }\r\n}());"],"sourceRoot":"/source/"}